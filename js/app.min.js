/**
 * Global main namespace for the application
 *
 * Entry point of the application
 * @namespace APP
 */

var APP = APP || function () {
	};

/**
 * Main application class
 *
 * @namespace APP
 * @name APP.Main
 */
APP.Main = (/** @lends APP.Main */function () {

	var exports,
		instance,
		forceGooglemaps = false,
		cookiePrefix = 'BakuTorch_',
		webgl = false;

	/**
	 * Initialize application and needed subclasses
	 * @public
	 */

	function init() {
		APP.HandlebarsHelpers.init();

		if (!window.Promise) {
			ES6Promise.polyfill();
		}

		//This is for debug purposes only!
		if (localStorage.getItem('forcegooglemaps')) {
			forceGooglemaps = !!parseInt(localStorage.getItem('forcegooglemaps'), 10);
		} else {
			localStorage.setItem('forcegooglemaps', '0');
		}

		if ($('#webgl-content').length && !forceGooglemaps) {
			webgl = (function () {
				try {
					return !!window.WebGLRenderingContext && !!document.createElement('canvas').getContext('experimental-webgl');
				} catch (e) {
					return false;
				}
			})();
		}

		// get current state before doing anything else
		APP.History.preInit();
		//get/store data from backend!
		APP.Model.init();

		APP.Performance.init();
		APP.Svg.init();
		APP.Search.init();
		APP.Overlay.init();
		APP.Contribute.init();
		APP.Social.init();
		APP.Timeline.init();
		APP.MiniMap.init();

		if (webgl) {
			APP.WebGL.init();
			$('#google-maps').hide();
		} else {
			APP.GoogleMaps.init();
			$('#webgl-content').hide();
		}

		APP.Model.loadCityList(onCitiesLoaded);

		initBindings();
	}

	function initBindings() {
		$('[data-change-version]').on('click', function () {

			if (forceGooglemaps) {
				localStorage.setItem('forcegooglemaps', '0');
			} else {
				localStorage.setItem('forcegooglemaps', '1');
			}

			window.location.reload();

		});

		$('body').on({
			'click': function () {
				$('[data-intro]').removeClass('show');
			}
		}, '[data-intro]');

	}

	function onCitiesLoaded() {
		APP.Views.init();
		APP.History.init();
		APP.Timeline.createTimeline();

		if (webgl) {
			APP.WebGL.onCitiesLoaded();
		} else {
			$('body').removeClass('globe-animation');
			APP.GoogleMaps.createCityMarkers();
			getIntroSceen();
		}

	}

	function getIntroSceen() {
		var introFirst = window.getCookie('introdesktop');

		console.log('getIntroSceen');

		if(APP.History.getPage().page[0] === 'home') {
			$('[data-intro]').addClass('show');
			window.setCookie('introdesktop', 'true', 4);
		}

	}

	function gotoCity(cityId) {
		if (webgl) {
			if (APP.WebGL.getMap3d()) {
				APP.WebGL.getMap3d().zoomCity(cityId);
			} else {
				setTimeout(function () {
					gotoCity(cityId);
				}, 200);
			}
		} else {
			APP.GoogleMaps.removePostMarkers();
			APP.GoogleMaps.zoomCity(cityId);
		}

	}

	exports = {
		/**
		 * Get singleton APP.Main instance
		 *
		 * @public
		 * @memberof APP.Main
		 * @returns {APP.Main}
		 */
		mobile: false,
		getIntroSceen: getIntroSceen,
		getInstance: function () {

			if (!instance) {
				instance = init();
			}

			return instance;
		},
		getCookiePrefix: function () {
			return cookiePrefix;
		},
		getCookieKey: function (str) {
			return cookiePrefix + str;
		},
		gotoCity: gotoCity
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

}());
/**
 * Application module for sliding copies
 *
 * @namespace APP
 * @name APP.Carousel
 */
APP.Carousel = function (/** @lends APP.Carousel */$carousel) {
	// Exported public module api calls
	var $carouselList,
		$prevSlideBtn,
		$nextSlideBtn,
		$indicatorList,
		carouselWidth,
		slideLength,
		currentSlide,
		intervalID,
		loadingCSSClass = 'carousel--loading',
		exports = {
			intervalTime: 3000,
			autoSlide: false
		},
		ytPlayer,
		hammerList,
		$window,
		resizeHandler;

	/**
	 * Initialize
	 *
	 * @public
	 * @return void
	 */
	function init() {
		loadYtIframeApi();
		initVariables();
		initBindings();

		if ($indicatorList.find('li').length > 1) {
			$indicatorList.find('li').eq(0).addClass('active');
			if (exports.autoSlide === true) {
				slideInit();
			} else {
				slide();
			}
		} else {
			$carousel.find('.carousel__pagination').hide();
		}

	}

	function loadYtIframeApi() {
		var tag = document.createElement('script');
		tag.src = 'https://www.youtube.com/iframe_api';
		var firstScriptTag = document.getElementsByTagName('script')[0];
		firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

		window.onYouTubeIframeAPIReady = function() {
			ytPlayer = new YT.Player('player');
		};

	}

	/**
	 * Initialize global variables for the module
	 *
	 * @private
	 * @return void
	 * */
	function initVariables() {
		$window = APP.Performance.getCachedDOM().$window;
		$carouselList = $carousel.find('[data-carousel-list]');
		$prevSlideBtn = $carousel.find('[data-prev-slide]');
		$nextSlideBtn = $carousel.find('[data-next-slide]');
		$indicatorList = $carousel.find('[data-carousel-indicator]');
		carouselWidth = $carouselList.width();
		slideLength = $carouselList.find('li').length;

		// initialize Hammer.js if we have touch events
		if (Modernizr.touch) {
			hammerList = new Hammer($carouselList[0]);
		}
		currentSlide = 0;

		if (typeof $carousel.attr('data-delay') !== 'undefined' && $carousel.attr('data-delay') !== '') {
			exports.intervalTime = parseInt($carousel.attr('data-delay'));
		}
	}

	/**
	 * Bind events for the DOM elements
	 *
	 * @private
	 * @return void
	 * */
	function initBindings() {
		// have to reset the carousel's width so tha transition won't
		// get screwed when we rotate a phone/tablet
		$window.on({
			'resize.resetcarouselWidth': resizeHandler,
			'load.showCarousel': function () {
				$carousel.removeClass(loadingCSSClass);
			}
		});

		$prevSlideBtn.on('click tap', function (e) {
			setCurrentSlide(-1);
			e.preventDefault();
		});
		$nextSlideBtn.on('click tap', function (e) {
			setCurrentSlide(1);
			e.preventDefault();
		});

		$indicatorList.find('li').each(function () {
			$(this).on('click', function () {
				currentSlide = $(this).index();
				slide();
			});
		});

		// pause the animation of the slides when hovering over a slide
		if (exports.autoSlide === true) {
			$carousel.on('mouseover', function () {
				clearTimerInterval();
			}).on('mouseleave', function () {
				slideInit();
			});
		}

		// set up touch events
		if (Modernizr.touch) {
			hammerList.on('swipeleft', function () {
				setCurrentSlide(1);
			});

			hammerList.on('swiperight', function () {
				setCurrentSlide(-1);
			});
		}


	}

	/**
	 * Determines the slide index depending on the direction
	 *
	 * @param {number} direction - +/-1 indicating back or forward movement
	 * @private
	 * @return void
	 */
	function setCurrentSlide(direction) {
		if (direction > 0 && currentSlide + 1 !== slideLength) {
			currentSlide++;
		} else if (direction < 0 && currentSlide - 1 >= 0) {
			currentSlide--;
		} else if (direction < 0 && currentSlide - 1 < 0) {
			currentSlide = slideLength - 1;
		} else {
			currentSlide = 0;
		}
		slide();
	}

	/**
	 * Sets the carousel's left position, this function does the actual animation
	 *
	 * @private
	 * @return void
	 */
	function slide() {
		var offsetValue = -(carouselWidth * currentSlide) + 'px',
			translateXValue = 'translateX(' + offsetValue + ')';

		$indicatorList.find('li').removeClass('active');

		if (Modernizr.csstransforms3d) {
			$carouselList.css({
				'-webkit-transform': translateXValue,
				'transform': translateXValue
			});
		} else {
			$carouselList.css({
				'left': offsetValue
			});
		}

		$carouselList.attr('data-current-index', currentSlide);
		$indicatorList.find('li').eq(currentSlide).addClass('active');

		if($carouselList.find('li').eq(currentSlide).find('#player').length) {
			ytPlayer = new YT.Player('player');
		}

		if(ytPlayer && ytPlayer.stopVideo) {
			ytPlayer.stopVideo();
		}

	}


	/**
	 * Auto slide init
	 *
	 * @private
	 * @return void
	 */
	function slideInit() {
		clearTimerInterval();
		intervalID = setInterval(function () {
			setCurrentSlide(1);
		}, exports.intervalTime);
	}

	/**
	 * Helper function for clearing the timeout that recalls the sliders movement function
	 *
	 * @private
	 * @return void
	 * */
	function clearTimerInterval() {
		window.clearInterval(intervalID);
	}

	/**
	 * Initialize the module
	 * */
	init();

};
APP.GradientImage = (function () {

	var gradientCanvas,
		gradientImage;

	function init() {
		gradientImage = new Image();
		gradientImage.onload = function () {
			createGradientImage();
		};

		gradientImage.src = 'i/content/torchgradient.jpg';
	}

	function createGradientImage() {
		gradientCanvas = document.createElement('canvas');
		gradientCanvas.width = gradientImage.width;
		gradientCanvas.height = gradientImage.height;

		gradientCanvas.getContext('2d').drawImage(gradientImage, 0, 0, gradientImage.width, gradientImage.height);
	}

	function getColorForPercent(percent) {
		var result = '#ffffff';

		if (gradientCanvas) {
			result = gradientCanvas.getContext('2d').getImageData(percent * gradientImage.width, 0, 1, 1).data;
		}


		return result;
	}

	return {
		init: init,
		getColorForPercent: getColorForPercent
	};

})();


/**
 * Overlay handling class
 *
 * @namespace APP
 * @name APP.Overlay
 */
APP.MiniMap = (/** @lends APP.Overlay */function () {
	var exports,
		$body,
		$overlay,
		$minimapcity,
		coordX,
		coordZ;

	function init() {
		initDOMElements();
	}

	function initDOMElements() {
		$body = APP.Performance.getCachedDOM().$body;
		$overlay = $body.find('[data-overlay]');
		$minimapcity = $body.find('[data-minimap-city]');
	}

	function getCoordsToCityId(cityId) {
		var city = APP.Model.getCityById(cityId);

		if (city) {
			coordX = parseInt(city.x, 10);
			coordZ = parseInt(city.z, 10);

			updateMiniMapCity(coordX, coordZ);
		}
	}

	function updateMiniMapCity(x, z) {
		$minimapcity.css('top', '50%').css('top', '+=' + z * 0.114062 + 'px');
		$minimapcity.css('left', '50%').css('left', '+=' + x * 0.114062 + 'px');
	}

	exports = {
		init: init,
		getCoordsToCityId: getCoordsToCityId

	};

	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();

/**
 * Overlay handling class
 *
 * @namespace APP
 * @name APP.Overlay
 */
APP.Overlay = (/** @lends APP.Overlay */function () {
	var exports,
		current = false,
		$body,
		debug = false,
		$overlay,
		$overlayContent,
		overlaysWithContentId = ['city-popup', 'city-details'];


	/**
	 * Initialize Overlay handling
	 */
	function init() {
		initDOMElements();
	}

	/**
	 * Init DOM elements
	 */
	function initDOMElements() {
		$body = APP.Performance.getCachedDOM().$body;
		$overlay = $body.find('[data-overlay]');
		$overlayContent = $body.find('[data-overlay-content]');

	}

	function openOverlay(overlay, html, target, data) {


		if (current) {
			closeOverlay([overlay, html, target, data]);

		} else {
			var overlayData = {'data-overlay': overlay};


			addHtml(html, target);
			$body.addClass('overlay--show');

			if ($.inArray(overlay, overlaysWithContentId) !== -1) {
				overlayData['data-content-id'] = data.result.id;
			}
			$overlay.addClass('overlay-' + overlay).attr(overlayData);

			current = overlay;
			$('.nano').nanoScroller({flash: true});

			if (current === 'city-details') {
				updateMinimap(data.result.id);
				APP.Carousel($('.carousel'));
			}

			if (current === 'event-details') {
				//baku cityID
				updateMinimap('e0103024-3af9-4cff-9a92-e4fdaf5f586f');
				APP.Carousel($('.carousel'));
			}
		}
	}

	function updateMinimap(cityId) {
		APP.MiniMap.init();
		APP.MiniMap.getCoordsToCityId(cityId);
	}

	function closeOverlay(openAfter) {
		if (current) {
			$body.removeClass('overlay--show');
			$overlay.removeClass('overlay-' + current);

			if (current === 'contribute') {
				$overlay.removeClass('show-social show-contribute show-terms show-images');
			}
			if ($.inArray(current, overlaysWithContentId) !== -1 && (!openAfter || (openAfter && openAfter[3] !== undefined && $overlay.attr('data-content-id') !== openAfter[3].result.id))) {
				// handle some things based on content id upon closing the overlay
				// timeline, for example 
				$('[data-timeline-cities] a[data-city=' + $overlay.attr('data-content-id') + ']').removeClass('active');
			}
			$overlay.attr({'data-overlay': '', 'data-content-id': ''});
			$overlayContent.empty();
			$overlayContent.attr('class', 'overlay__content');	// nah :(
			current = false;

			if (openAfter) {
				openOverlay.apply(null, openAfter);
			}
		}
	}

	function addHtml(html, target) {

		if (target) {

			if ($overlayContent.find('.' + target).length === 0) {
				$overlayContent.append($('<div class="' + target + '"></div>'));
			}

			$overlayContent.find('.' + target).html(html);

		} else {
			$overlayContent.append(html);
		}

	}

	exports = {
		init: init,
		addHtml: addHtml,
		openOverlay: openOverlay,
		closeOverlay: closeOverlay
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();

/**
 * Search handling class
 *
 * @namespace APP
 * @name APP.Search
 */
APP.Search = (/** @lends APP.Search */function () {
	var exports,
		$body,
		$search,
		env;

	/**
	 * Initialize Post handling
	 */
	function init() {
		env = document.location.href.indexOf('localhost') !== -1 ? 'local' : 'server';

		initDOMElements();
		initBindings();
	}

	/**
	 * Init DOM elements
	 */
	function initDOMElements() {
		$body = APP.Performance.getCachedDOM().$body;
		$search = $body.find('[data-search] input');
	}

	function initBindings() {

		$search.on({
			'keyup': function (e) {
				var keyword = $search.val();
				var isWebgl = APP.WebGL.inited();
				var isZoomedToCity = APP.WebGL.isZoomedToCity();

				if (isWebgl) {
					if (!isZoomedToCity) {
						$('[data-search]').addClass('has-user-input');
						searchByCity(keyword);
					} else {
						$('[data-search]').addClass('has-user-input');
						doSearchInCity(APP.WebGL.getSelectedCityId(), keyword);
					}

				} else {
					$('[data-search]').addClass('has-user-input');
					doSearch(keyword);
				}

				if(keyword === '') {
					$('[data-search]').removeClass('has-user-input');
				}

			}

		});

		$body.on({
			'click': function () {
				$body.find('[data-search] input').val('');
				$('[data-search]').removeClass('has-user-input');
				doSearch('');
			}
		}, '[data-search] .close-button');

	}

	function doSearch(keyword, callback) {
		var url = (env === 'local') ? 'js/json/searchnormal.json' : '/api/search/generic?keyword=' + keyword + '&pagesize=10&pagenumber=0';

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				APP.Views.openView('search', data);
			});

	}

	function doSearchInCity(cityid, keyword, callback) {
		var url = (env === 'local') ? 'js/json/search.json' : '/api/search/posts?MaxItemCount=100&CityID=' + cityid + '&Keyword=' + keyword;

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				if (callback) {
					callback.apply(null, [data]);
				}
			});
	}

	/**
	 *  Overview search, we are zoomed out!, just get the cities
	 */
	function searchByCity(keyword, callback) {
		var url = (env === 'local') ? 'js/json/searchcity.json' : '/api/search/summary/posts?keyword=' + keyword;

		if (keyword.length > 0) {
			fetch(url)
				.then(function (response) {
					return response.json();
				})
				.then(function (data) {
					APP.WebGL.filterCities(data);
				});
		} else {
			APP.WebGL.removeFilterCities();
		}


	}


	exports = {
		init: init,
		doSearch: doSearch
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();


/**
 * Contribute handling class
 *
 * @namespace APP
 * @name APP.Contribute
 */
APP.Contribute = (/** @lends APP.Contribute */function () {
	var exports,
		$body,
		$facebookImageButton,
		$instagramImageButton,
		$overlay,
		facebookFullImageWidth = 720,
		facebookThumbnailWidth = 200,
		imageListTemplate,
		selectedImageUrl = '',
		imageProvider = '',
		processedTags = [],
		imageListCount = APP.Main.mobile ? 9 : 8,
		imageSaveUrl = '/api/torch/image/upload',
		imageDowloadUrl = '/api/torch/image/download',
		postSaveUrl = '/api/torch/post/upload';

	/**
	 * Initialize Contribute handling
	 */
	function init() {
		initDOMElements();
		initBindings();

		imageListTemplate = Handlebars.compile($('#image-list-template').html());
	}

	/**
	 * Init DOM elements
	 */
	function initDOMElements() {
		$body = APP.Performance.getCachedDOM().$body;
		$facebookImageButton = $body.find('[data-facebook-photos]');
		$instagramImageButton = $body.find('[data-instagram-photos]');
		$overlay = $('[data-overlay]');
	}

	function initBindings() {

		$body.on({
			'click': function () {
				APP.Social.getFacebookImages({callback: APP.Contribute.onFacebookImagesLoaded});
			}
		}, '[data-facebook-photos]');

		$body.on({
			'click': function () {
				APP.Social.getInstagramImages({callback: APP.Contribute.onInstagramImagesLoaded});
			}
		}, '[data-instagram-photos]');

		$body.on({
			'click': function () {
				if (imageProvider === 'facebook') {
					APP.Social.getFacebookImages({
						callback: APP.Contribute.onFacebookImagesLoaded,
						direction: 'before',
						value: $(this).attr('data-images-prev-button')
					});
				} else if (imageProvider === 'instagram') {
					console.log('back');
				}
			}
		}, '[data-images-prev-button]');

		$body.on({
			'click': function () {
				if (imageProvider === 'facebook') {
					APP.Social.getFacebookImages({
						callback: APP.Contribute.onFacebookImagesLoaded,
						direction: 'after',
						value: $(this).attr('data-images-next-button')
					});
				} else if (imageProvider === 'instagram') {
					APP.Social.getInstagramImages({
						callback: APP.Contribute.onInstagramImagesLoaded,
						direction: 'max_id',
						value: $(this).attr('data-images-next-button')
					});
				}
			}
		}, '[data-images-next-button]');

		$body.on({
			'click': function () {
				APP.Views.switchContributionView('terms');
				// $overlay.removeClass('show-social show-contribute show-images').addClass('show-terms');
			}
		}, '[data-show-terms]');

		$body.on({
			'click': function () {
				APP.Views.switchContributionView('contribute');
				// $overlay.removeClass('show-social show-contribute show-terms').addClass('show-contribute');
			}
		}, '[data-hide-terms]');

		$body.on({
			'click': function () {
				onImageSelected($(this).attr('data-image-url'));
			}
		}, '[data-image-id]');

		$body.on({
			'click': function (e) {
				e.preventDefault();
				submitForm($(this).closest('form'));
			}
		}, '[data-submit]');

		$body.on({
			'paste': function () {
				limitTextarea($(this));
			},
			'change keyup paste blur': function () {
				limitTextarea($(this));
			},
			'change keydown': function () {
				limitTextarea($(this));
			}
		}, '[data-character-limit]');

		// handle tags field
		$body.on({
			'paste change': function () {
				var $input = $(this);
				setTimeout(function () {
					processTags($input);
				}, 10);
			},
			'blur': function () {
				processTags($(this));
			},
			'keyup': function (e) {
				var k = e.keyCode || e.which;
				// console.log(k);
				if (k === 188 || k === 32) {
					processTags($(this));
				}
			}
		}, '[data-tags]');

		// remove tags
		$body.on({
			'click': function () {
				var tag = $(this).attr('data-tag'),
					maxTags = parseInt($('[data-tags]').attr('data-tags')),
					result = [],
					$dataTags = $('[data-tags]'),
					$dataTagsList = $('[data-tags-list]');

				$(this).remove();

				for (var i = 0; i < processedTags.length; i++) {
					if (processedTags[i] !== tag) {
						result.push(processedTags[i]);
					}
				}
				processedTags = result;

				if (processedTags.length === 0) {
					$dataTagsList.removeClass('has-tags');
				}
				if (processedTags.length === maxTags) {
					$dataTagsList.parent().addClass('has-max');
				} else {
					$dataTagsList.parent().removeClass('has-max');
					$dataTags[0].focus();
				}
				renderTags(false);
			}
		}, '[data-tags-list] [data-tag]');

		$body.on({
			'click': function () {
				$('[data-contribute-block]').removeClass('show-message-timeout');
			}
		}, '[data-close-post-message]');

		$body.on({
			'click': function () {
				var afterNav = $overlay.attr('data-after-confirm'),
					$overlayClose = $overlay.find('[data-nav=overlay-close]');

				if (afterNav !== undefined) {
					switch (afterNav) {
						case 'nav':
							$overlayClose.attr('data-force-close', '');
							APP.History.continueNavigation();
							break;
						case 'close':
							$overlayClose.attr('data-force-close', '').trigger('click');
							break;
					}
				}
			}
		}, '[data-close-post-force]');

		$body.on({
			'click': function () {
				$('[data-contribute-block]').removeClass('show-message-confirm');
				APP.History.resetContinueNavigation();
			}
		}, '[data-close-post-cancel]');

		$body.on({
			'click': function () {
				$(this)[0].select();
			}
		}, '[data-copy-url]');

	}

	function limitTextarea($textarea) {
		var chars = $textarea.val().split('').length,
			limit = parseInt($textarea.attr('data-character-limit'));

		$textarea.siblings('.character-limit').text(limit - chars);

		if (chars > 0) {
			$textarea.closest('.error').removeClass('error');
		}

		// console.log($textarea[0].clientHeight,$textarea[0].scrollHeight);
		if ($textarea[0].clientHeight < $textarea[0].scrollHeight) {
			$textarea.parent().addClass('has-scroll');
		} else {
			$textarea.parent().removeClass('has-scroll');
		}

		if (limit - chars <= 0) {
			$textarea.val($textarea.val().substr(0, limit - 1));
			$textarea.siblings('.character-limit').addClass('trouble');
		} else if (limit - chars < 10) {
			$textarea.siblings('.character-limit').addClass('trouble');
		} else {
			$textarea.siblings('.character-limit').removeClass('trouble');
		}
	}

	function processTags($input) {
		if ($input.val().indexOf(',') === -1 && $input.val().indexOf(' ') === -1) {
			return;
		}

		var tags = $input.val().split(/[\s,]+/);

		for (var i = 0; i < tags.length; i++) {
			// A-z0-9 + hungarian and azeri special characters in unicode
			var cleanTag = $.trim(tags[i].replace(/[^a-zA-Z0-9\u0049\u0069\u00C7\u00D6\u00DC\u00E7\u00F6\u00FC\u011E\u011F\u0130\u0131\u015E\u015F\u018F\u01DD\u00C1\u00C9\u00CD\u00D3\u00D6\u00DA\u00DC\u00E1\u00E9\u00ED\u00F3\u00F6\u00FA\u00FC\u0150\u0151\u0170\u0171]/g, ''));

			if (cleanTag !== '' && processedTags.indexOf(cleanTag) === -1) {
				processedTags.push(cleanTag);
			}
		}

		$input.val('');
		renderTags(true);
	}

	function renderTags(display) {
		var $tagList = $('[data-tags-list]'),
			$targetInput = $('[data-tags-target]'),
			maxTags = parseInt($('[data-tags]').attr('data-tags'));

		$targetInput.val(processedTags.join(','));

		if (display === true && processedTags.length > 0) {
			$tagList.html('').addClass('has-tags');

			for (var i = 0; i < Math.min(processedTags.length, maxTags); i++) {
				if ($tagList.find('[data-tag=' + processedTags[i] + ']').length === 0) {
					$tagList.append('<span class="tag" data-tag="' + processedTags[i] + '">#' + processedTags[i] + '</span>');
				}
			}

			if (processedTags.length === maxTags) {
				$tagList.parent().addClass('has-max');
			} else {
				$tagList.parent().removeClass('has-max');
				$('[data-tags]')[0].focus();
			}
		}
	}

	function onFacebookImagesLoaded(data) {
		var imagesData = {images: []},
			imagesLength;

		// data.data = [];	// to simulate when user doesn't have any photos
		// data.data = data.data.slice(1,3);	// to simulate when user have only a few photos
		bindOverlay('facebook');

		if (data.data.length === 0) {
			onImageSelected(false);
			return;
		}

		for (var i = 0; i < data.data.length; i++) {
			imagesData.images.push({
				fullimage: data.data[i].images[getClosestSizeIndex(data.data[i].images, facebookFullImageWidth)].source,
				thumbnail: data.data[i].images[getClosestSizeIndex(data.data[i].images, facebookThumbnailWidth)].source,
				id: data.data[i].id
			});
		}

		imagesData.after = (typeof data.paging.next !== 'undefined' && imagesData.images.length>=imageListCount) ? data.paging.cursors.after : false;
		imagesData.before = (typeof data.paging.previous !== 'undefined') ? data.paging.cursors.before : false;

		renderImages(imagesData);
	}

	function onInstagramImagesLoaded(data) {
		var imagesData = {images: []},
			image = {};

		// data.data = [];	// to simulate when user doesn't have any photos
		// data.data = data.data.slice(1,3);	// to simulate when user have only a few photos
		bindOverlay('instagram');

		if (data.data.length === 0) {
			onImageSelected(false);
			return;
		}

		for (var i = 0; i < data.data.length; i++) {

			image = {
				/*jshint camelcase: false */
				thumbnail: data.data[i].images.low_resolution.url,
				fullimage: data.data[i].images.standard_resolution.url,
				id: data.data[i].id
			};

			if (data.data[i].location) {
				image.lat = data.data[i].location.latitude;
				image.long = data.data[i].location.longitude;
			}

			imagesData.images.push(image);
		}

		if (data.pagination) {
			imagesData.before = false;
			imagesData.after = (imagesData.images.length>=imageListCount) ? data.pagination.next_max_id : false;
			// imagesData.before = instagramPrev;
			// instagramPrev = data.pagination.next_max_id;
			// console.log('--- instagramPrev updated', instagramPrev);
		}

		renderImages(imagesData);
	}

	function renderImages(imagesData) {

		APP.Views.switchContributionView('images');
		$body.find('[data-image-list]').html(imageListTemplate(imagesData));

        if (imagesData.after !== false) {
            $body.find('[data-images-next-button]').attr('data-images-next-button', imagesData.after).removeClass('block--display-none');
        } else {
            $body.find('[data-images-next-button]').attr('data-images-next-button', '').addClass('block--display-none');
        }
        if (imagesData.before !== false) {
            $body.find('[data-images-prev-button]').attr('data-images-prev-button', imagesData.before).removeClass('block--display-none');
        } else {
            $body.find('[data-images-prev-button]').attr('data-images-prev-button', '').addClass('block--display-none');
        }

	}

	function onImageSelected(imageUrl) {

		var $imageUpload = $('.image-upload');
		selectedImageUrl = imageUrl;

		APP.Views.switchContributionView('contribute');
		$body.find('[data-' + imageProvider + '-photos]').removeClass('block--display-none');
		$imageUpload.addClass('image-selected').removeClass('image-notfound image-uploaderror image-uploaded image-progress');

		if (imageUrl === false) {
			selectedImageUrl = '';
			$imageUpload.addClass('image-notfound').find('span.notfound span.' + imageProvider).removeClass('block--display-none');
		} else {

			var formData = {
				imageurl: selectedImageUrl,
				accountType: imageProvider,
				userId: APP.Social.userData.userId,
				userName: APP.Social.userData.userName,
				accessToken: APP.Social.userData.userToken
			};

			$('.image-upload__image').attr('style', 'background-image: url(\'' + selectedImageUrl + '\')');

			var $promise = $.ajax({
				type: 'POST',
				contentType: 'application/json',
				url: imageDowloadUrl,
				data: JSON.stringify(formData),
				dataType: 'json',
				timeout: 30000
			});

			$.when($promise).then(function (response) {
				// console.log('image download response', response);
				$imageUpload.addClass('image-selected');

				if (response.isSuccess) {
					$imageUpload.addClass('image-uploaded');
					$('.image-upload__image').attr('style', 'background-image: url(\'' + response.result + '\')');
					selectedImageUrl = response.result;
				} else {
					selectedImageUrl = '';
					$('.image-upload__image').removeAttr('style');
					$imageUpload.addClass('image-uploaderror');
					$imageUpload.find('[data-upload-error]').text(response.genericError);
				}
			}, function (x, t) {
				console.log('x:', x, ', t,', t);
				selectedImageUrl = '';

				if (t === 'timeout') {
					$('[data-contribute-block]').removeClass('show-loading').addClass('show-message-timeout');
				}

			});

		}

	}

	/**
	 * bindOverlay
	 * only bind bind fileupload and load citylist when social login is successful
	 */
	function bindOverlay(service) {
		imageProvider = service;
		bindFileupload();

		var $cityList = $('[data-contribute-block] select[name=city]'),
			cityList = APP.Model.getCityList();

		for (var i in cityList) {
			if (cityList[i]) {
				$cityList.append('<option value="' + cityList[i].id + '">' + cityList[i].dateLabel + ' - ' + cityList[i].title + '</option>');
			}

		}

	}

	function bindFileupload() {
		var $imageUpload = $('.image-upload');

		$('#fileupload').fileupload({
			formData: {
				json: JSON.stringify({
					accountType: imageProvider,
					userId: APP.Social.userData.userId,
					userName: APP.Social.userData.userName,
					accessToken: APP.Social.userData.userToken
				})
			},
			url: imageSaveUrl,
			dataType: 'json',
			done: function (e, data) {
				console.log('upload ready', data);
				var response = data._response.result;

				// todo: rearrange, move it to APP.Views.switchContributeView
				if (!$('[data-overlay]').hasClass('show-contribute')) {
					$('[data-overlay]').addClass('show-contribute').removeClass('show-social show-images show-terms');
					$body.find('[data-' + imageProvider + '-photos]').removeClass('block--display-none');
				}

				$imageUpload.removeClass('image-progress').addClass('image-selected');


				if (response.isSuccess) {
					$imageUpload.addClass('image-uploaded');
					$('.image-upload__image').attr('style', 'background-image: url(\'' + response.result + '\')');
					selectedImageUrl = response.result;
				} else {
					selectedImageUrl = '';
					$imageUpload.addClass('image-uploaderror');
					$imageUpload.find('[data-upload-error]').text(response.genericError);
				}

                if(APP.Main.mobile) {
                    $body.find('.upload__wrapper').attr('class', 'upload__wrapper');
                }

			},
			fail: function (e, data) {
                if(APP.Main.mobile) {
                    $body.find('.upload__wrapper').attr('class', 'upload__wrapper upload__wrapper--error');
                }
			},
			start: function (e, data) {
				console.log('progress start', data);
				$('.image-upload__image').removeAttr('style');
				$imageUpload.removeClass('image-uploaderror image-uploaded').addClass('image-progress');

                if(APP.Main.mobile) {
                    $body.find('.upload__wrapper').attr('class', 'upload__wrapper upload__wrapper--progress');
                }

			},
			progressall: function (e, data) {
				var progress = parseInt(data.loaded / data.total * 100, 10);
				$(APP.Main.mobile ? '.progressbar .progress' : '#progress .progress-bar').css('width', progress + '%');
			}
		});
	}

	// reset some variables when closing the overlay or submiting the form successfully
	function resetForm() {
		processedTags = [];
	}

	function submitForm($form) {

		var formData = window.serializeObject($form),
			$imageUpload = $('.image-upload');

		$form.find('.error').removeClass('error');
		$('[data-contribute-block]').addClass('show-loading');

		// process fields & add user data to formData, instead of hidden input fields
		formData.tags = formData.tags.split(',');
		formData.accountType = imageProvider;
		formData.userId = APP.Social.userData.userId;
		formData.userName = APP.Social.userData.userName;
		formData.accessToken = APP.Social.userData.userToken;
		formData.imageUrl = selectedImageUrl;

		console.log('submitForm', formData);

		var $promise = $.ajax({
			type: 'POST',
			contentType: 'application/json',
			url: postSaveUrl,
			data: JSON.stringify(formData),
			dataType: 'json',
			timeout: 30000
		});

		$.when($promise).then(function (result) {
			$('[data-contribute-block]').removeClass('show-loading');

			if (result.isSuccess) {

				console.log('success');
				APP.Views.openView('contribute-success', result);
				resetForm();
				
			} else {

				if (result.errorCodes && result.errorCodes.length !== 0) {
					for (var e in result.errorCodes) {
						if (result.errorCodes[e]) {
							if (e === 'image') {
								$imageUpload.addClass('error');
							} else {
								$form.find('[name=' + e + ']').closest('.field').addClass('error');
							}

						}

					}

				}

			}

		}, function (x, t) {

			console.log('x:', x, ', t,', t);
			if (t === 'timeout') {
				$('[data-contribute-block]').removeClass('show-loading').addClass('show-message-timeout');
			}

		});
	}

	/**
	 * getClosestSizeIndex
	 * get the index of the image which is the closest to a certain size
	 * for facebook images
	 */
	function getClosestSizeIndex(images, targetSize) {
		var selectedIndex = false,
			selectedSize = 0,
			largestAvailableIndex,
			largestAvailableSize = 0;

		for (var i = 0; i < images.length; i++) {
			if (images[i].width > largestAvailableSize) {
				largestAvailableIndex = i;
				largestAvailableSize = images[i].width;
			}
			if (images[i].width >= targetSize && (selectedIndex === false || selectedSize > images[i].width)) {
				selectedIndex = i;
				selectedSize = images[i].width;
			}
		}

		if (selectedIndex === false) {
			selectedIndex = largestAvailableIndex;
			selectedSize = largestAvailableSize;
		}

		return selectedIndex;
	}


	exports = {
		init: init,
		onFacebookImagesLoaded: onFacebookImagesLoaded,
		onInstagramImagesLoaded: onInstagramImagesLoaded,
		resetForm: resetForm
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();

APP.CustomMarker = (/** @lends APP.GoogleMaps */function () {

	var exports = {};

	function init() {

		CustomMarker.prototype = new google.maps.OverlayView();

		CustomMarker.prototype.draw = function () {
			var me = this,
				div = this.div_,
				title;

			if (!div) {
				// Create a overlay text DIV
				div = this.div_ = document.createElement('div');
				// Create the DIV representing our CustomMarker
				div.style.position = 'absolute';
				div.style.paddingLeft = '0px';
				div.style.cursor = 'pointer';

				if (this.type_ < 4) {
					div.style.border = 'none';
				} else {
					if (this.img) {
						var imgDiv = document.createElement('div');
						imgDiv.className = 'post-image';
						imgDiv.style.backgroundImage = 'url(' + this.img + ')';
						//imgDiv.style.backgroundImage = 'url(http://lorempixel.com/200/200/)';
						div.appendChild(imgDiv);
					}
				}

				switch (this.type_) {
					case 0 :
						div.className = 'custom-marker custom-marker-type-0';
						break;
					case 1 :
						div.className = 'custom-marker custom-marker-type-1';
						break;
					case 2 :
						div.className = 'custom-marker custom-marker-type-2';
						break;
					case 3 :
						div.className = 'custom-marker custom-marker-type-3';
						break;

					case 4:
						div.className = 'custom-marker custom-marker-post';
						break;

					default:
						div.className = 'custom-marker';
						break;
				}

				title = document.createElement('span');
				title.textContent = this.title_;

				div.appendChild(title);

				google.maps.event.addDomListener(div, 'click', function (event) {
					google.maps.event.trigger(me, 'click');
				});

				// Then add the overlay to the DOM
				var panes = this.getPanes();
				panes.overlayImage.appendChild(div);

			}

			// Position the overlay
			var point = this.getProjection().fromLatLngToDivPixel(this.latlng_);
			if (point) {
				div.style.left = point.x + 'px';
				div.style.top = point.y + 'px';
			}


		};

		CustomMarker.prototype.remove = function () {
			// Check if the overlay was on the map and needs to be removed.

			if (this.div_) {
				this.div_.parentNode.removeChild(this.div_);
				this.div_ = null;

				this.setMap(null);
			}

		};

		CustomMarker.prototype.getPosition = function () {
			return this.latlng_;
		};

	}

	function CustomMarker(latlng, map, type, title, img) {
		this.latlng_ = latlng;

		// Once the LatLng and text are set, add the overlay to the map.  This will
		// trigger a call to panes_changed which should in turn call draw.
		if(map && this.setMap) {
			this.setMap(map);
		}

		this.type_ = type;
		this.title_ = title;
		this.img = img;
	}

	exports.init = init;
	exports.CustomMarker = CustomMarker;
	return exports;

})();
/**
 * GoogleMaps handling class
 *
 * @namespace APP
 * @name APP.GoogleMaps
 */
APP.GoogleMaps = (/** @lends APP.GoogleMaps */function () {

	var exports,
		$body,
		selectedCity,
		isMapLoaded = false,
		googleMap,
		cityMarkers = [],
		postMarkers = [],
		flightPlanCoordinates,
		routesArray = [];

	/**
	 * Initialize SVG handling
	 */
	function init() {
		initDOMElements();
		loadGoogleMapsSDK();
		initBindings();
	}

	/**
	 * Init DOM elements
	 */
	function initDOMElements() {
		$body = APP.Performance.getCachedDOM().$body;
	}

	function loadGoogleMapsSDK() {
		if (!isMapLoaded) {
			var script = document.createElement('script');
			script.type = 'text/javascript';
			script.src = 'https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyCUfxx2hROthsWDDCmSEp0sTemM-56txM8&callback=APP.GoogleMaps.mapLoaded';
			document.body.appendChild(script);
		} else {
			APP.GoogleMaps.mapLoaded();
		}

	}

	function initBindings() {
		$body.on({
			'click': function () {
				if (googleMap) {
					var zoomType = $(this).attr('data-webgl-control'),
						actZoom = googleMap.zoom;

					if (zoomType === 'zoomin' && actZoom < googleMap.maxZoom) {
						googleMap.setZoom(actZoom + 1);

					} else if (zoomType === 'zoomout' && actZoom > googleMap.minZoom) {
						googleMap.setZoom(actZoom - 1);
					}
				}


			}
		}, '[data-webgl-control]');
	}

	function zoomCity(cityId) {
		var city = APP.Model.getCityById(cityId),
			latlng;

		selectedCity = city;

		if (google && google.maps && google.maps.LatLng && city.lat && city.long) {
			latlng = new google.maps.LatLng(city.lat, city.long);
		}

		if (googleMap && city && latlng) {
			googleMap.setCenter(latlng);
			googleMap.setZoom(12);
		}

		if (postMarkers.length) {
			removePostMarkers();
		}

		APP.Model.getPostByCityId(city.id, onPostsLoaded);
	}

	function onPostsLoaded(data) {

		var postsArray = data.data,
			i,
			marker,
			latlng,
			lat,
			long;

		if (postMarkers.length) {
			removePostMarkers();
		}

		for (i = 0; i < postsArray.length; i++) {
			lat = parseFloat(selectedCity.lat) + (Math.random() - 0.5) * 0.1;
			long = parseFloat(selectedCity.long) + (Math.random() - 0.5) * 0.2;
			latlng = new google.maps.LatLng(lat, long);

			marker = new APP.CustomMarker.CustomMarker(latlng, googleMap, 4, postsArray[i].title, postsArray[i].imageUrl);
			postMarkers.push(marker);

			google.maps.event.addListener(marker, 'click', onPostClicked(postsArray[i]));
		}

	}

	function onPostClicked(post) {
		return function () {
			History.pushState({
				state: 1,
				rand: Math.random()
			}, post.title, post.url.toLowerCase());
		};
	}

	function removePostMarkers() {
		var marker;

		for (var i = 0; i < postMarkers.length; i++) {
			marker = postMarkers[i];

			if (marker) {
				marker.remove();
				marker = null;
			}

		}

		postMarkers = [];

	}

	function mapLoaded() {
		var mapstyle = [
			{
				'featureType': 'all',
				'elementType': 'geometry',
				'stylers': [
					{
						'color': '#157bb6'
					}
				]
			},
			{
				'featureType': 'all',
				'elementType': 'labels.text.fill',
				'stylers': [
					{
						'gamma': 0.01
					},
					{
						'lightness': 20
					}
				]
			},
			{
				'featureType': 'all',
				'elementType': 'labels.text.stroke',
				'stylers': [
					{
						'saturation': -31
					},
					{
						'lightness': -33
					},
					{
						'weight': 2
					},
					{
						'gamma': 0.8
					}
				]
			},
			{
				'featureType': 'all',
				'elementType': 'labels.icon',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'administrative',
				'elementType': 'geometry.fill',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'color': '#ff0000'
					}
				]
			},
			{
				'featureType': 'administrative.country',
				'elementType': 'geometry.fill',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'color': '#17001d'
					}
				]
			},
			{
				'featureType': 'administrative.country',
				'elementType': 'geometry.stroke',
				'stylers': [
					{
						'visibility': 'on'
					},
					{
						'color': '#75192b'
					},
					{
						'weight': '3'
					}
				]
			},
			{
				'featureType': 'administrative.country',
				'elementType': 'labels.text',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'administrative.province',
				'elementType': 'geometry.stroke',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'administrative.province',
				'elementType': 'labels.text',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'administrative.locality',
				'elementType': 'labels.text',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'administrative.neighborhood',
				'elementType': 'labels.text',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'administrative.land_parcel',
				'elementType': 'geometry.fill',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'color': '#460d0d'
					}
				]
			},
			{
				'featureType': 'administrative.land_parcel',
				'elementType': 'geometry.stroke',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'color': '#ff0000'
					}
				]
			},
			{
				'featureType': 'administrative.land_parcel',
				'elementType': 'labels.text',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'landscape',
				'elementType': 'geometry',
				'stylers': [
					{
						'lightness': 30
					},
					{
						'saturation': 30
					}
				]
			},
			{
				'featureType': 'landscape',
				'elementType': 'geometry.fill',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'color': '#ff0000'
					}
				]
			},
			{
				'featureType': 'landscape',
				'elementType': 'labels.text',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'landscape.natural',
				'elementType': 'geometry.fill',
				'stylers': [
					{
						'visibility': 'on'
					},
					{
						'color': '#17001d'
					}
				]
			},
			{
				'featureType': 'landscape.natural.landcover',
				'elementType': 'geometry.fill',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'color': '#f93030'
					}
				]
			},
			{
				'featureType': 'landscape.natural.landcover',
				'elementType': 'geometry.stroke',
				'stylers': [
					{
						'visibility': 'on'
					},
					{
						'color': '#ff0000'
					}
				]
			},
			{
				'featureType': 'landscape.natural.terrain',
				'elementType': 'geometry',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'hue': '#ff0000'
					}
				]
			},
			{
				'featureType': 'landscape.natural.terrain',
				'elementType': 'geometry.fill',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'color': '#000000'
					}
				]
			},
			{
				'featureType': 'landscape.natural.terrain',
				'elementType': 'geometry.stroke',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'color': '#dbd5d5'
					}
				]
			},
			{
				'featureType': 'poi',
				'elementType': 'geometry',
				'stylers': [
					{
						'saturation': 20
					},
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'poi.attraction',
				'elementType': 'geometry',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'poi.park',
				'elementType': 'geometry',
				'stylers': [
					{
						'lightness': 20
					},
					{
						'saturation': -20
					}
				]
			},
			{
				'featureType': 'road',
				'elementType': 'geometry',
				'stylers': [
					{
						'lightness': 10
					},
					{
						'saturation': -30
					},
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'road',
				'elementType': 'geometry.stroke',
				'stylers': [
					{
						'saturation': 25
					},
					{
						'lightness': 25
					},
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'road',
				'elementType': 'labels.text',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'transit',
				'elementType': 'geometry',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'water',
				'elementType': 'all',
				'stylers': [
					{
						'lightness': -20
					}
				]
			},
			{
				'featureType': 'water',
				'elementType': 'geometry.fill',
				'stylers': [
					{
						'visibility': 'on'
					},
					{
						'color': '#320c3d'
					}
				]
			},
			{
				'featureType': 'water',
				'elementType': 'labels.text',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			}
		];

		var mapOptions = {
			minZoom: 8,
			maxZoom: 12,
			zoom: 8,
			center: new google.maps.LatLng(40.3847883, 47.6595083),
			styles: mapstyle,
			disableDefaultUI: true
		};

		var strictBounds = new google.maps.LatLngBounds(
			new google.maps.LatLng(38.348453, 44.729536),
			new google.maps.LatLng(41.965934, 50.425948)
		);

		if (document.getElementById('google-maps')) {
			googleMap = new google.maps.Map(document.getElementById('google-maps'), mapOptions);

			google.maps.event.addListener(googleMap, 'zoom_changed', function () {
				removePostMarkers();
			});
			google.maps.event.addListener(googleMap, 'tilesloaded', tilesLoadedCallback);

			google.maps.event.addListener(googleMap, 'dragend', function () {
				if (strictBounds.contains(googleMap.getCenter())) {
					return;
				}

				// We're out of bounds - Move the map back within the bounds

				var c = googleMap.getCenter(),
					x = c.lng(),
					y = c.lat(),
					maxX = strictBounds.getNorthEast().lng(),
					maxY = strictBounds.getNorthEast().lat(),
					minX = strictBounds.getSouthWest().lng(),
					minY = strictBounds.getSouthWest().lat();

				if (x < minX) {
					x = minX;
				}

				if (x > maxX) {
					x = maxX;
				}

				if (y < minY) {
					y = minY;
				}

				if (y > maxY) {
					y = maxY;
				}

				setTimeout(googleMap.panTo(new google.maps.LatLng(y, x)), 1000);
			});

		}

		isMapLoaded = true;
	}

	function tilesLoadedCallback() {
		$('html').addClass('gmaps-loaded');
	}

	function createCityMarkers() {
		var cityListData = APP.Model.getCityList(),
			city,
			cityTo,
			marker,
			latlng,
			i = 0;

		if (!isMapLoaded) {

			setTimeout(function () {
				createCityMarkers();
			}, 200);

			return;
		}

		APP.CustomMarker.init();

		for (i = 0; i < cityListData.length; i++) {
			city = cityListData[i];

			if (city.lat && city.long) {

				latlng = new google.maps.LatLng(city.lat, city.long);

				if (city.eventDateType < 2) {
					flightPlanCoordinates = [];
					cityTo = APP.Model.getCityById(city.connectTo);

					if (cityTo) {
						flightPlanCoordinates.push(latlng);
						flightPlanCoordinates.push(new google.maps.LatLng(cityTo.lat, cityTo.long));
					}

					var flightPath = new google.maps.Polyline({
						path: flightPlanCoordinates,
						geodesic: true,
						strokeColor: '#9d34bb',
						strokeOpacity: 0.8,
						strokeWeight: 2
					});
					flightPath.setMap(googleMap);

					routesArray.push(flightPath);
				}

				marker = new APP.CustomMarker.CustomMarker(latlng, googleMap, city.eventType, city.name);

				google.maps.event.addListener(marker, 'click', onMarkerClicked(city));

				cityMarkers.push(marker);
			}

		}

	}

	function onMarkerClicked(city) {

		return function () {
			var lang = APP.History.getCurrentLang();

			History.pushState({
				state: 1,
				rand: Math.random()
			}, city.title, '/' + lang + '/city/' + city.name.toLowerCase());
		};

	}

	exports = {
		init: init,
		mapLoaded: mapLoaded,
		createCityMarkers: createCityMarkers,
		zoomCity: zoomCity,
		removePostMarkers: removePostMarkers
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();


/**
 * HandlebarsHelpers
 *
 * @namespace APP
 * @name APP.HandlebarsHelpers
 */
APP.HandlebarsHelpers = (/** @lends APP.HandlebarsHelpers */function () {

	var exports;

	function init() {
		initHandlebarsHelpers();
	}

	function initHandlebarsHelpers() {

		Handlebars.registerHelper('toLowerCase', function (str) {
			return str.toLowerCase();
		});

		Handlebars.registerHelper('eq', function (v1, v2, options) {
			if (v1 === v2) {
				return options.fn(this);
			}
			return options.inverse(this);
		});

	}

	exports = {
		init: init
	};

	return exports;

}());

/**
 * History class
 *
 * @namespace APP
 * @name APP.History
 */
APP.History = (/** @lends APP.History */function () {

	var exports,
		navigated = false,
		debug = true,
		currentPage = {},
		manualStateChange = true,
		$continueNavObject = false,
		opts = {
			langs: ['en', 'az'],
			historyOffset: 0
		};

	/**
	 * Initialize History handling
	 */
	function preInit() {
		var state = getPage(History.getState(), true);

	}

	/**
	 * Initialize History handling
	 */
	function init() {
		var state = getPage(History.getState());
		setPage(state);
		initBindings();
	}

	function initBindings() {

		// bind History to statechange
		History.Adapter.bind(window, 'statechange', function () {
			var state = History.getState(),
				back = false;

			if (manualStateChange) {
				back = true;
			}
			manualStateChange = true;

			setPage(getPage(state), back);
		});

		$(document).on('click', '[data-nav]', function (e) {
			e.preventDefault();
			handleUserNavigation(this);
		});

		$(document).on('click', '[data-popup]', function (e) {
			e.preventDefault();
			openPopup(this);
		});

		// close on ESC
		// route to the same event handler to handle confirm
		$(document).on('keyup', function (e) {
			var k = e.keyCode || e.which;
			if (k === 27 && $('[data-overlay]').attr('data-overlay') !== '') {
				$('[data-overlay] [data-nav=overlay-close]').trigger('click');
			}
		});
	}

	function openPopup(elem) {
		var $elem = $(elem),
			size = $elem.attr('data-popup').split('x');

		if ($elem.attr('href') !== undefined) {
			window.open($elem.attr('href'), $elem.text(), 'width=' + size[0] + ',height=' + size[1] + ',left=100,top=100');
		}
	}

	function handleUserNavigation(elem) {

		var navigateBack,
			$elem = $(elem),
			dataNavValue = $elem.attr('data-nav'),
			$overlay = $('[data-overlay]');

		if ($elem.attr('href') !== undefined) {

			// handle confirm for contribution form
			if ($overlay.attr('data-overlay') === 'contribute' && $overlay.hasClass('show-contribute') && $overlay.find('[data-nav=overlay-close]').attr('data-force-close') === undefined && $continueNavObject === false) {
				$('[data-contribute-block]').addClass('show-message-confirm');
				$overlay.attr('data-after-confirm', 'nav');
				$continueNavObject = $elem;
				return;

			} else {
				$overlay.removeAttr('data-after-confirm');
				$overlay.find('[data-nav=overlay-close]').removeAttr('data-force-close');
				History.pushState({state: 1, rand: Math.random()}, getTitle($elem, false), $elem.attr('href'));
				$continueNavObject = false;
				navigated = true;
				manualStateChange = false;

				if ($overlay.attr('data-overlay') === 'contribute') {
					APP.Contribute.resetForm();
				}
			}

		} else {
			// handle custom actions without URL
			navigateBack = false;

			if (dataNavValue === 'overlay-close') {
				// handle confirm for contribution form
				if ($overlay.attr('data-overlay') === 'contribute' && $overlay.hasClass('show-contribute') && $elem.attr('data-force-close') === undefined) {
					$('[data-contribute-block]').addClass('show-message-confirm');
					$overlay.attr('data-after-confirm', 'close');
					return;

				} else {
					$overlay.removeAttr('data-after-confirm');
					$elem.removeAttr('data-force-close');
					$continueNavObject = false;
					APP.Overlay.closeOverlay();

					if ($overlay.attr('data-overlay') === 'contribute') {
						APP.Contribute.resetForm();
					}
				}
			}

			if (dataNavValue === 'overlay-back') {
				// APP.Overlay.closeOverlay();
				navigateBack = true;
			}

			if (navigateBack && navigated) {
				// only go back if the user has already navigated on the site
				History.back();
			} else {
				// navigate to home if there's nowhere to go back
				History.pushState({state: 1, rand: Math.random()}, getTitle($elem, 'Home'), '/');
			}
		}
	}

	/**
	 * Generate page title
	 */
	function getTitle($elem, text) {
		var title = text !== false ? text : $elem.text(),
			prefix = $('[data-logo]').length ? $('[data-logo]').text() + ' - ' : '';

		if ($elem.closest('.overlay-city-popup').length && text === false) {
			title = $elem.find('h2').text();
		}

		if ($elem.attr('data-logo') !== undefined) {
			return $('[data-logo]').text();
		} else {
			return prefix + title;
		}
	}

	/**
	 * Perform navigation
	 */
	function setPage(param, back) {
		var pageSet = false,
			langCookie,
			$langSelect = $('[data-header] [data-lang-sel]');

		// handle instagram response
		if (param.page[0].indexOf('access_token=') !== -1) {
			if (debug) {
				console.log('------------access_token------');
			}
			param.page[2] = param.page[0];
			param.page[1] = 'instagram-login';
			param.page[0] = 'contribute';

			// get language from cookie
			langCookie = window.getCookie('lang');

			if (langCookie !== false) {
				param.lang = langCookie;
			}
		}

		// handle language when changed
		if ($langSelect.attr('data-lang-sel') !== param.lang) {
			$langSelect.attr('data-lang-sel', param.lang);
			$langSelect.find('a.selected').removeClass('selected');
			$langSelect.find('a[data-lang=' + param.lang + ']').addClass('selected');
			window.setCookie('lang', param.lang, 14);
		}

		switch (param.page[0]) {
			case 'home':
				APP.Views.openView('home');
				if (APP.Overlay) {
					APP.Overlay.closeOverlay();
				}
				if (APP.WebGL) {
					APP.WebGL.zoomOut();
				}
				pageSet = true;

				break;

			case 'login':
			case 'contribute':
				if (param.page[1] === 'instagram-login') {
					History.pushState({
						state: 1,
						rand: Math.random()
					}, $(this).text(), '/' + param.lang + '/contribute/');
				}

				APP.Views.openView('contribution', {back: back});
				pageSet = true;

				break;

			case 'contribute-success':
				APP.Views.openView('contribute-success');
				pageSet = true;

				break;

			case 'news':
				APP.Views.openView('news-list', {back: back});
				pageSet = true;

				break;

			case 'liveblog':
				if (param.page[1] !== undefined && window.isNumeric(param.page[1])) {
					APP.Views.openView('contribute', [param.page[1]]);
				} else {
					APP.Views.openView('liveblog-list', {back: back});
				}
				pageSet = true;

				break;

			case 'city':
				if (param.page[1] !== undefined) {
					if (param.page[2] === 'details') {
						APP.Views.openView('city-details', {id: param.page[1], view: 'city-details', navigated: navigated});
					} else {
						APP.Views.openView('city-popup', {id: param.page[1], view: 'city-popup'});
					}
				} else {
					APP.Views.openView('city-details', {view: 'city-details', back: back});
				}

				pageSet = true;

				break;

			case 'event':
				if (param.page[1] !== undefined) {
					APP.Views.openView('event', {id: param.page[1], view: 'event'});
					pageSet = true;
				}

				break;

			case 'post':
				var data = {page: param.page[1],  navigated: navigated};

				if (param.page[1] !== undefined) {
					APP.Views.openView('post', data);
					pageSet = true;
				}

				break;

			case 'search':
				if (param.page[1] !== undefined) {
					if (!APP.Main.mobile) {
						$('[data-search] input').val(param.page[1]);
						APP.Search.doSearch(param.page[1]);
					} else {
						APP.Views.openView('search', {query: param.page[1]});
					}
				}

				break;

			case 'privacy-and-policy':
				APP.Views.openView('privacy');
				break;

			case 'terms-and-conditions':
				APP.Views.openView('terms');
				break;

			//Mobile
			case 'selectcity':
				APP.Views.openView('select-city', {back: back});
				pageSet = true;
				break;

			//city detail on desktop!
			case 'timeline':
				if (param.page[1] !== undefined) {
					APP.Views.openView('timeline', {id: param.page[1], back: back});
				}

				pageSet = true;
				break;

			case 'map':
				APP.Views.openView('map', {back: back});
				pageSet = true;
				break;

			case 'contributions':
				APP.Views.openView('contributions', {back: back});
				pageSet = true;
				break;

		}

		if (pageSet !== false) {
			currentPage = param;
		}

	}

	/**
	 * Process History state into an object with the language and the array of the page path
	 */
	function getPage(state0, store) {
		var state = state0 || History.getState(),
			re = {lang: false, page: []},
			process = [],
			hash = state.hash.split('/'),
			count = 0;

		for (var i in hash) {
			if (hash[i] !== undefined) {
				if (count >= opts.historyOffset) {

					if ($.inArray(hash[i], opts.langs) !== -1) {
						re.lang = hash[i];
					}

					else if (hash[i] !== '' && hash[i].substr(0, 1) !== '?' && $.inArray(hash[i].split('?')[0], opts.langs) === -1) {
						process.push(hash[i].split('?')[0]);
					}

				}

				count++;
			}

		}

		if (re.lang === false) {
			re.lang = opts.langs[0];
		}

		re.page = (process.length === 0) ? ['home'] : process;

		if (!!store) {
			currentPage = re;
		}
		return re;
	}

	exports = {
		init: init,
		preInit: preInit,
		getCurrentLang: function () {
			return currentPage.lang;
		},
		getCurrentPage: function () {
			return currentPage;
		},
		continueNavigation: function () {
			return $continueNavObject.trigger('click');
		},
		resetContinueNavigation: function () {
			$continueNavObject = false;
		},
		getPage: getPage
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();
APP.Model = (function () {

	var env,
		debugDate = true,
		exports,
		currentDate = new Date('2015-07-12'), // format: new Date('2015-05-12'), no timestamp
		cityList = [];

	function init() {
		env =  'local';
	}

	function loadNewsList(callback) {
		var url = (env === 'local') ? 'js/json/news.json' : '/api/torch/news/list';

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				if (callback) {
					callback.apply(null, [data]);
				}
			});

	}

	function loadCityList(callback) {
		var url = (env === 'local') ? 'js/json/cities.json' : '/api/torch/city/list';

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {

				if (!debugDate && data.serverTime) {
					currentDate = new Date(data.serverTime * 1000);
				}

				var cityDate;
				cityList = data.result;

				for (var i = 0; i < cityList.length; i++) {
					cityDate = new Date(cityList[i].date).getTime();

					if (currentDate.getTime() > cityDate) {
						cityList[i].eventDateType = 0;
					} else if (currentDate.getTime() < cityDate) {
						cityList[i].eventDateType = 2;
					} else {
						cityList[i].eventDateType = 1;
					}

					cityList[i].eventDateType = parseInt(cityList[i].eventDateType, 10);
					cityList[i].eventType = parseInt(cityList[i].eventType, 10);
					cityList[i].slug = '/' + APP.History.getCurrentLang() + '/city/' + cityList[i].name.toLowerCase();
					cityList[i].x = parseInt(cityList[i].x, 10);
					cityList[i].y = parseInt(cityList[i].y, 10);
					cityList[i].z = parseInt(cityList[i].z, 10);
					cityList[i].dateNum = parseInt(cityList[i].dateNum, 10);
				}

				callback.apply(null);
			});

	}

	function loadCityDetails(callback, vars) {

		var cityId = getCityIdByName(vars.id),
			url = (env === 'local') ? 'js/json/citydetail' + (cityId === 'e0103024-3af9-4cff-9a92-e4fdaf5f586f' ? '_baku' : '') + '.json' : '/api/torch/citydetail?id=' + cityId;

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				if (callback) {
					callback.apply(null, [data]);
				}

			});
	}

	function loadContent(callback, vars) {
		var url = (env === 'local') ? 'js/json/content.json' : vars;

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				if (callback) {
					callback.apply(null, [data]);
				}

			});

	}

	function loadEventDetails(callback, vars) {
		var url = (env === 'local') ? 'js/json/eventdetail.json' : '/api/torch/eventdetail?id=' + vars.id;

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				if (callback) {
					callback.apply(null, [data]);
				}

			});
	}

	function getCityIdByName(str, field) {
		field = field || 'name';

		for (var i = 0; i < cityList.length; i++) {
			if (cityList[i][field].toLowerCase() === str.toLowerCase()) {
				return cityList[i].id;
			}
		}

		return false;
	}

	function getCityById(id) {
		for (var i = 0; i < cityList.length; i++) {
			if (cityList[i].id.toLowerCase() === id) {
				return cityList[i];
			}
		}

		return false;
	}

	function getAdjacentCity(id,dir) {
		for (var i = 0; i < cityList.length; i++) {
			if (cityList[i].id.toLowerCase() === id) {
				if (dir==='prev') {
					return i-1<0 ? false : cityList[i-1];
				}
				if (dir==='next') {
					return i+1>=cityList.length ? false : cityList[i+1];
				}
				// return dir==='prev' ? cityList[i];
			}
		}

		return false;
	}

	function getPostById(callback, id) {

		var url = (env === 'local') ? 'js/json/post.json' : '/api/torch/getpost/' + id;

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				if (callback) {
					callback.apply(null, [data]);
				}

			});

	}

	function getPostByCityId(id, callback) {
		var url = (env === 'local') ? 'js/json/posts.json' : '/api/search/posts?CityId=' + id + '&MaxItemCount=1000';

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				if (callback) {
					callback.apply(null, [data]);
				}
			});
	}

	function getOfficialPostsList(callback) {
		var url = (env === 'local') ? 'js/json/officialposts.json' : '/api/search/posts?IsOfficial=1&MaxItemCount=100';

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				if (callback) {
					callback.apply(null, [data]);
				}
			});

	}


	exports = {
		init: init,
		loadCityList: loadCityList,
		loadCityDetails: loadCityDetails,
		loadEventDetails: loadEventDetails,
		loadContent: loadContent,
		getCityList: function () {
			return cityList;
		},
		getCityById: getCityById,
		getCityIdByName: getCityIdByName,
		getAdjacentCity: getAdjacentCity,
		getOfficialPostsList: getOfficialPostsList,

		getPostById: getPostById,
		getPostByCityId: getPostByCityId,
		loadNewsList: loadNewsList,
		getCurrentDate: function () {
			return currentDate;
		}
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();

/**
 * Performance increase module (cache, device optimizations)
 *
 * @namespace APP
 * @name APP.Performance
 */
APP.Performance = (/** @lends APP.Performance */function () {

	var exports,
		$cachedDOM,
		windowResize,
		deviceProperties;

	/**
	 * Init performance helpers
	 *
	 */
	function init() {
		try {
			initCacheDOM();
			initBindings();
			saveDeviceProperties();
		} catch (e) {
			throw new ReferenceError('APP.Performance cannot be initialized!');
		}
	}

	/**
	 * Cache DOM elements
	 */
	function initCacheDOM() {

		$cachedDOM = {
			window: window,
			$window: $(window),
			$body: $(document.body),
			$html: $('html'),
			$head: $('head')
		};

	}

	function initBindings() {
		$cachedDOM.$window.on('resize', resizeWindow);
	}

	/**
	 * Window resize hook, calls scale carousel method
	 */
	function resizeWindow() {
		clearTimeout(windowResize);

		windowResize = setTimeout(function () {
			saveDeviceProperties();
		}, 200);

	}

	/**
	 * Save device properties to an object
	 */
	function saveDeviceProperties() {
		var w = window,
			d = document,
			e = d.documentElement,
			g = d.getElementsByTagName('body')[0],
			W = w.innerWidth || e.clientWidth || g.clientWidth,
			H = w.innerHeight || e.clientHeight || g.clientHeight;

		deviceProperties = {
			connection: navigator.connection ? navigator.connection : 'unknown',
			pixelRatio: window.devicePixelRatio,
			window: {
				width: W,
				height: H
			}
		};

	}

	/**
	 * Return cached DOM elements
	 *
	 * @returns {*}
	 */
	function getCachedDOM() {
		return $cachedDOM;
	}

	/**
	 * Return saved device properties
	 *
	 * @returns {*}
	 */
	function getDeviceProperties() {
		return deviceProperties;
	}

	exports = {
		init: init,
		initCacheDOM: initCacheDOM,
		getCachedDOM: getCachedDOM,
		getDeviceProperties: getDeviceProperties
	};

	/* test-code */
	exports.__testonly__ = {
		init: init,
		initCacheDOM: initCacheDOM,
		saveDeviceProperties: saveDeviceProperties,
		getCachedDOM: getCachedDOM,
		getDeviceProperties: getDeviceProperties
	};

	/* end-test-code */

	return exports;

}());

/**
 * Social class
 *
 * @namespace APP
 * @name APP.Social
 */
APP.Social = (/** @lends APP.Social */function () {
	var exports,
		$body,
		$contributeButton,
		$facebookLoginButton,
		$instagramLoginButton,
		contributionTemplate,
		facebookID = window._facebookAppId || '701020803351456',
		instagramID = window._instagramAppId || 'a95d4effc65e4c7aa9daa0426ed20856',
		instagramRedirect = window._instagramRedirectUri || 'http://baku2015torch.frodo.dmz/',
		instagramToken,
		instagramUserData = {},
		imageListCount = APP.Main.mobile ? 9 : 8,
		userData = {
			userId: null,
			userName: null,
			userToken: null
		};

	/**
	 * Initialize Social handling
	 */
	function init() {
		initDOMElements();
		initBindings();
		getInstagramSelf();
	}

	/**
	 * Init DOM elements
	 */
	function initDOMElements() {
		$body = APP.Performance.getCachedDOM().$body;
		$contributeButton = $body.find('[data-contribute-button]');
		$facebookLoginButton = $body.find('[data-facebook-login]');
		$instagramLoginButton = $body.find('[data-instagram-login]');
	}

	function initBindings() {

		$body.on({
			'click': function () {
				loginToFacebook();
			}
		}, '[data-facebook-login]');

		$body.on({
			'click': function () {
				if (instagramID && instagramRedirect) {
					window.location = 'https://instagram.com/oauth/authorize/?client_id=' + instagramID + '&redirect_uri=' + instagramRedirect + '&response_type=token';
				}
			}
		}, '[data-instagram-login]');

	}

	function loadFacebookSDK() {

		window.fbAsyncInit = function () {
			FB.init({
				appId: facebookID,
				cookie: true,
				xfbml: true,
				version: 'v2.2'
			});

			FB.getLoginStatus(function (response) {
				console.log('loadFacebookSDK', response);
				// statusChangeCallback(response);
			});
		};

		var js,
			fjs = document.getElementsByTagName('script')[0];

		if (document.getElementById('facebook-jssdk')) {
			return;
		}

		js = document.createElement('script');
		js.id = 'facebook-jssdk';
		js.src = '//connect.facebook.net/en_US/sdk.js';
		fjs.parentNode.insertBefore(js, fjs);
	}

	function loginToFacebook() {
		FB.login(function (response) {
			console.log('facebook response: ', response);

			if (response.status === 'connected') {
				console.log('FB connected', response);
				userData.userId = response.authResponse.userID;
				userData.userToken = response.authResponse.accessToken;
				statusChangeCallback(response);

			} else if (response.status === 'not_authorized') {
				// The person is logged into Facebook, but not your app.
				console.log('not_authorized');
			} else {
				// The person is not logged into Facebook, so we're not sure if
				// they are logged into this app or not.
				console.log('not_lgegedin');
			}
		}, {scope: 'public_profile,email,user_photos'});
	}

	// This is called with the results from from FB.getLoginStatus().
	function statusChangeCallback(response) {
		console.log('FB ', response);

		if (response.status === 'connected') {

			FB.api('/me', function (response) {
				console.log('FB Successful login for: ' + response.name);
				userData.userName = response.name;
				APP.Social.getFacebookImages({callback: APP.Contribute.onFacebookImagesLoaded});
				$body.find('[data-facebook-photos]').removeClass('block--display-none');
			});

		} else if (response.status === 'not_authorized') {
			document.getElementById('status').innerHTML = 'Please log into this app.';
			$facebookLoginButton.removeClass('block--display-none');
		} else {
			document.getElementById('status').innerHTML = 'Please log into Facebook.';
			$facebookLoginButton.removeClass('block--display-none');
		}
	}

	function getFacebookImages(data) {
		var url = '/me/photos/uploaded?limit=' + imageListCount;

		if (data.direction) {
			url += '&' + data.direction + '=' + data.value;
		}

		FB.api(url,
			function (response) {
				if (response && !response.error) {
					if (data.callback) {
						data.callback.apply(null, [response]);
					}
				}
			}
		);
	}

	/**
	 *   Get user informations from instagram!
	 */
	function getInstagramSelf() {
		if (window.location.hash.indexOf('access_token=') !== -1) {
			instagramToken = window.location.hash.split('=')[1];
		}

		var currentPage = APP.History.getCurrentPage();
		if (currentPage.page.length>0 && currentPage.page[0].indexOf('access_token=') !== -1) {
			instagramToken = currentPage.page[0].split('=')[1];
		}

		if (instagramToken) {
			console.log('instagram token accepted', instagramToken);
			$.getJSON('https://api.instagram.com/v1/users/self/?access_token=' + instagramToken + '&callback=?', function (result) {
				console.log('instagram user self result', result.data);
				instagramUserData = result.data;
				userData.userId = result.data.id;
				userData.userName = result.data.username;
				userData.userToken = instagramToken;
				APP.Social.getInstagramImages({callback: APP.Contribute.onInstagramImagesLoaded});
				APP.Views.switchContributionView('images');
			});

		}

	}

	function getInstagramImages(data) {
		var url = 'https://api.instagram.com/v1/users/' + instagramUserData.id + '/media/recent/?access_token=' + instagramToken;

		if (data.direction) {
			/*jshint camelcase: false */
			url += '&' + data.direction + '=' + data.value;
		}

		if (instagramToken) {
			$.getJSON(url + '&count=' + imageListCount + '&callback=?', function (result) {
				if (result && data.callback) {
					if (data.callback) {
						data.callback.apply(null, [result]);
					}
				}
			});
		}

	}

	exports = {
		init: init,
		loadFacebookSDK: loadFacebookSDK,
		getFacebookImages: getFacebookImages,
		getInstagramImages: getInstagramImages,
		getFacebookAppId: function () {
			return facebookID;
		},
		facebookID: facebookID,
		userData: userData
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})
();


/**
 * SVG handling class
 *
 * @namespace APP
 * @name APP.Svg
 */
APP.Svg = (/** @lends APP.Svg */function () {
	var exports,
		$body,
		settings = {
			svgUrl: 'i/sprite/sprite-app.svg'
		};

	/**
	 * Initialize SVG handling
	 */
	function init() {
		initDOMElements();
		loadSvg();
	}

	/**
	 * Init DOM elements
	 */
	function initDOMElements() {
		$body = APP.Performance.getCachedDOM().$body;
	}

	/**
	 * Loads SVG sprite via ajax
	 * @returns {Object} jQuery promise
	 */
	function loadSvg() {
		var $promise = $.ajax({
			type: 'GET',
			url: settings.svgUrl,
			dataType: 'html',
			contentType: 'application/json; charset=utf-8'
		});

		$.when($promise).then(function (result) {
			addSpriteToDOM(result);
		});

	}

	/**
	 * Add SVG sprite to DOM
	 *
	 * @param sprite
	 */
	function addSpriteToDOM(sprite) {
		$body.find('[data-svgsprite]').remove();
		$body.append('<div class="block--display-none" data-svgsprite>' + sprite + '</div>');
	}

	exports = {
		init: init
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();


/**
 * Timeline class
 *
 * @namespace APP
 * @name APP.Timeline
 */
APP.Timeline = (function () {

	var exports,
		windowResize,
		debug = false,
		$body,
		$header,
		$timeline,
		currentDate = false,
		currentCity = false,
		timeLineTemplate,
		timelineDates = {};

	/**
	 * Initialize Timeline handling
	 */

	function init() {
		initDOMElements();
		initHandlebarTemplates();
		initBindings();
	}

	function initDOMElements() {
		$body = APP.Performance.getCachedDOM().$body;
		$header = $body.find('[data-header]');
		$timeline = $body.find('[data-timeline]');
	}

	function initHandlebarTemplates() {
		timeLineTemplate = Handlebars.compile($('#timeline-template').html());
	}

	function initBindings() {
		$(window).on('resize', resizeWindow);

		$body.on('click', '[data-timeline-dates] li', function (e) {
			e.preventDefault();
			seekCities($(this).attr('data-date'), false);
		});

		$body.on({
			'click': function () {
				scrollTimeline('left');
			}
		}, '[data-timeline-prev]');

		$body.on({
			'click': function () {
				scrollTimeline('right');
			}
		}, '[data-timeline-next]');

	}

	function createTimeline() {
		var cityList = APP.Model.getCityList();
		timelineDates.dates = {};

		for (var i = 0; i < cityList.length; i++) {

			if (timelineDates.dates[cityList[i].date] === undefined) {
				var torchClasses = ['past', 'today', 'future'];
				timelineDates.dates[cityList[i].date] = {
					date: window.formatDate(cityList[i].date),	// format date with month names according to current language
					cities: [],
					torch: torchClasses[cityList[i].eventDateType]
				};

			}

			timelineDates.dates[cityList[i].date].cities.push(cityList[i]);
		}

		$timeline.append(timeLineTemplate(timelineDates));

		// todo: revise timeouts
		setTimeout(function () {
			$header.addClass('show-timeline-dates');
		}, 1000);

		setTimeout(function () {
			seekTimeline(0);
		}, 2000);

	}

	//What is i?
	// i is index, what else?!
	//maybe kiskutya, kiscica
	function seekTimeline(i) {
		var $items = $('[data-timeline-dates]').find('li'),
			$item = $items.eq(i),
			currentPage = APP.History.getCurrentPage();

		// seek to start before the event
		if ($items.filter('[data-status=today]').length===0) {
			seekCities($items.eq(0).attr('data-date'), false);
			return;
		}
		
		// seek to end after the event
		if ($items.filter('[data-status=past]').length===$items.length) {
			seekCities($items.eq($items.length-1).attr('data-date'), false);
			return;
		}

		if ($item.attr('data-status') === 'past') {
			$item.addClass('past');

			setTimeout(function () {
				seekTimeline(i + 1);
			}, 50);
		}

		if ($item.attr('data-status') === 'today') {
			$item.append('<span class="torch"></span>').addClass('today');

			if (currentPage && currentPage.page && currentPage.page[0] !== 'city') {
				seekCities($item.attr('data-date'), false);
			}

		}

	}

	function seekCities(date, cityid) {

		var $timelineDates = $('[data-timeline-dates]'),
			$timelineCities = $('[data-timeline-cities]');

		currentDate = date;
		currentCity = cityid;

		$header.addClass('show-timeline-cities');
		$timeline.find('.active').removeClass('active');
		$timelineDates.find('li[data-date=' + date + ']').addClass('active');
		$timelineCities.find('li[data-date=' + date + ']').addClass('active');
		$timelineCities.find('li[data-status=today]').addClass('torch');

		if (cityid !== false) {
			$timelineCities.find('li[data-date=' + date + '] a[data-city=' + cityid + ']').addClass('active');
			APP.Main.gotoCity(cityid);
		}

		var correction = parseInt($timelineCities.find('li').eq(0).css('margin-left')),
			cityWidth = Math.round($timelineCities.find('li').eq(0).width()),
			activeDateOffset = Math.round($timelineDates.find('li.active').offset().left),
			activeCityPos = Math.round($timelineCities.find('li.active').position().left),
			timelineOffset = Math.round($timelineDates.offset().left),
			timelineWidth = Math.round($timelineCities.width()),
			targetPos = activeDateOffset - timelineOffset - activeCityPos - correction,
			rightGutter = 40;

		if (targetPos + activeCityPos + cityWidth + rightGutter > timelineWidth) {
			targetPos = 0 - activeCityPos - rightGutter + (timelineWidth - cityWidth);
		}

		if ($timelineCities.find('li.active').is(':first-child')) {
			$timeline.addClass('left-end');
		} else {
			$timeline.removeClass('left-end');
		}

		if ($timelineCities.find('li.active').is(':last-child')) {
			$timeline.addClass('right-end');
			targetPos = 0 - activeCityPos + (timelineWidth - cityWidth);
		} else {
			$timeline.removeClass('right-end');
		}

		$timelineCities.find('ul').css({ left: targetPos });
		if (!$timelineCities.find('ul').hasClass('moving')) { 
			setTimeout(function(){ $timelineCities.find('ul').addClass('moving'); },100);
		}
		highlightDates(targetPos);
	}

	function highlightDates(timelinePos){

		var $timelineDates = $('[data-timeline-dates]'),
			$timelineCities = $('[data-timeline-cities]'),
			cityWidth = Math.round($timelineCities.find('li').eq(0).width()),
			timelineWidth = Math.round($timelineCities.width());

		$timelineCities.find('li').each(function(){
			var $date = $timelineDates.find('li[data-date='+$(this).attr('data-date')+']'),
				posLeft = Math.round($(this).position().left);

			if (0-posLeft<=timelinePos && (posLeft+timelinePos+cityWidth)<timelineWidth) {
				$date.addClass('visible');
			} else {
				$date.removeClass('visible');
			}
		});
	}

	function scrollTimeline(direction) {
		var $timelineCities = $('[data-timeline-cities]'),
			currentPos = parseInt($timelineCities.find('ul').css('left')),
			timelineWidth = Math.round($timelineCities.eq(0).width()),
			maxScroll = timelineWidth - $timelineCities.find('ul').width(),
			scrollDistance = Math.round($(window).width() / 4);

		if (direction === 'left') {
			if (currentPos + scrollDistance > 0) {
				$timeline.addClass('left-end');
				$timelineCities.find('ul').css({ left: 0 });
				highlightDates(0);
			} else {
				$timeline.removeClass('right-end').removeClass('left-end');
				$timelineCities.find('ul').css({ left: '+=' + scrollDistance + 'px' });
				highlightDates($timelineCities.find('ul').position().left+scrollDistance);
		}
		}

		if (direction === 'right') {
			if (currentPos - scrollDistance <= maxScroll) {
				$timeline.addClass('right-end');
				$timelineCities.find('ul').css({ left: maxScroll });
				highlightDates(maxScroll-40);
			} else {
				$timeline.removeClass('left-end').removeClass('right-end');
				$timelineCities.find('ul').css({ left: '-=' + scrollDistance + 'px' });
				highlightDates($timelineCities.find('ul').position().left-scrollDistance);
			}
		}
	}

	/**
	 * Window resize hook, calls scale carousel method
	 */
	function resizeWindow() {
		clearTimeout(windowResize);

		windowResize = setTimeout(function () {
			seekCities(currentDate, currentCity);
		}, 200);
	}

	exports = {
		init: init,
		createTimeline: createTimeline,
		seekCities: seekCities
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;


}());
/**
 * Views class
 *
 * @namespace APP
 * @name APP.Views
 */
APP.Views = (/** @lends APP.Views */function () {
	var exports,
		$body,
		templates = {},
		isNavigated = false; //post view come from user interaction

	/**
	 * Initialize Views
	 */
	function init() {
		$body = APP.Performance.getCachedDOM().$body;
		initHandlebarTemplates();
	}

	function openView(view, data) {

		switch (view) {
			case 'home':
				APP.Overlay.closeOverlay();
				break;

			case 'news-list':
				APP.Model.loadNewsList(initNewsList, data);
				break;

			case 'liveblog-list':
				APP.Model.getOfficialPostsList(initOfficialPostsList, data);
				break;

			case 'post':
				isNavigated = data.navigated;
				APP.Model.getPostById(initPostView, data.page);
				break;

			case 'city-popup':
				APP.Model.loadCityDetails(initCityPopup, data);
				break;

			case 'city-details':
				isNavigated  = data.navigated;
				APP.Model.loadCityDetails(initCityDetails, data);
				break;

			case 'event':
				APP.Model.loadEventDetails(initEventDetails, data);
				break;

			case 'contribution':
				if (!APP.Overlay.current) {
					APP.Overlay.openOverlay('contribute', templates.contributionTemplate({}));
					switchContributionView('social');
					APP.Social.loadFacebookSDK();
				}
				break;

			case 'contribute-success':
				initContributeSuccess(data);
				break;

			case 'search':

				if(data.keyword) {
					APP.Overlay.openOverlay('search', templates.searchTemplate(data));
				} else {
					APP.Overlay.closeOverlay();
				}

				break;

			case 'privacy':
				if ($('[data-privacy-service-url]').length) {
					APP.Model.loadContent(initContent, $('[data-privacy-service-url]').attr('data-privacy-service-url'));
				} else {
					APP.Overlay.openOverlay('content', templates.contentTemplate(data));
				}
				break;

			case 'terms':
				if ($('[data-terms-service-url]').length) {
					APP.Model.loadContent(initContent, $('[data-terms-service-url]').attr('data-terms-service-url'));
				} else {
					APP.Overlay.openOverlay('content', templates.contentTemplate(data));
				}

				break;

		}
	}

	function initContent(data) {
		APP.Overlay.openOverlay('content', templates.contentTemplate(data.result));
	}

	function initContributeSuccess(data) {
		var templateData = {
			facebookAppId: APP.Social.getFacebookAppId(),
			domain: document.location.protocol + '//' + document.location.host,
			permalink: document.location.protocol + '//' + document.location.host + data.result.url
		};
		APP.Overlay.openOverlay('contribute-success', templates.contributeSuccessTemplate(templateData));
	}

	function initPostView(data) {

		data.result.facebookAppId = APP.Social.getFacebookAppId();
		data.result.domain = document.location.protocol + '//' + document.location.host;
		data.result.permalink = document.location.protocol + '//' + document.location.host + data.result.url;
		data.result.imageUrl = data.result.imageUrl + '?size=normal';
		data.result.isnavigated = isNavigated;
		APP.Overlay.openOverlay('post', templates.contributeTemplate(data.result));
	}

	function initCityPopup(data) {
		data.result.slug = '/' + APP.History.getCurrentLang() + '/city/' + data.result.name.toLowerCase() + '/details';
		data.result.dateDay = data.result.dateLabel.split(',')[0];
		data.result.mainImageThumb = data.result.mainImage + '?size=citysmall';
		data.result.prevCity = APP.Model.getAdjacentCity(data.result.id, 'prev');
		data.result.nextCity = APP.Model.getAdjacentCity(data.result.id, 'next');
		setTimeline(data.result.date, data.result.id);

		APP.Overlay.openOverlay('city-popup', templates.cityPopupTemplate(data.result), false, data);
	}

	function initCityDetails(data) {
		setTimeline(data.result.date, data.result.id);
		data.result.mainImage = data.result.mainImage + '?size=city';
		data.result.language = APP.History.getCurrentLang();
		data.result.isnavigated = isNavigated;
		APP.Overlay.openOverlay('city-details', templates.cityDetailsTemplate(data.result), false, data);
	}

	function initEventDetails(data) {
		data.result.event = true;
		APP.Overlay.openOverlay('event-details', templates.cityDetailsTemplate(data.result), false, data);
	}

	function initNewsList(data) {
		APP.Overlay.openOverlay('news-list', templates.newsListTemplate({
			'language': APP.History.getCurrentLang(),
			'news': data.result
		}));
	}

	function initOfficialPostsList(data) {
		data.language = APP.History.getCurrentLang();
		APP.Overlay.openOverlay('liveblog-list', templates.liveblogListTemplate(data));
	}

	function setTimeline(date, cityid) {
		resetTimeline();
		APP.Timeline.seekCities(date, cityid);
	}

	function resetTimeline() {
		$('.timeline').find('li.active').removeClass('active').find('a.active').removeClass('active');
	}

	function switchContributionView(show, $elem) {
		var views = ['images', 'social', 'contribute', 'terms'],
			hide = [],
			$wrapper = $elem || false;

		if ($wrapper === false) {
			$wrapper = APP.Main.mobile ? $('[data-contribute-module]') : $('[data-overlay]');
		}

		for (var i = 0; i < views.length; i++) {
			if (views[i] !== show) {
				hide.push('show-' + views[i]);
			}
		}

		$wrapper.removeClass(hide.join(' ')).addClass('show-' + show);
	}


	function initHandlebarTemplates() {
		parseHandleBarTemplate('#news-list-template', 'newsListTemplate');
		parseHandleBarTemplate('#liveblog-list-template', 'liveblogListTemplate');
		parseHandleBarTemplate('#contribute-template', 'contributeTemplate');
		parseHandleBarTemplate('#city-popup-template', 'cityPopupTemplate');
		parseHandleBarTemplate('#city-details-template', 'cityDetailsTemplate');
		parseHandleBarTemplate('#contribute-success-template', 'contributeSuccessTemplate');
		parseHandleBarTemplate('#search-template', 'searchTemplate');
		parseHandleBarTemplate('#contribution-template', 'contributionTemplate');
		parseHandleBarTemplate('#content-template', 'contentTemplate');
	}

	function parseHandleBarTemplate(templateDomName, templateVariable) {
		if ($(templateDomName).length) {
			templates[templateVariable] = Handlebars.compile($(templateDomName).html());
		} else {
			console.warn('[Views] error parsing handlebar: ', templateDomName);
		}
	}

	exports = {
		init: init,
		openView: openView,
		resetTimeline: resetTimeline,
		switchContributionView: switchContributionView
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})
();
APP.Border3d = (function () {

	var scene,
		inited = false,
		mesh,
		mesh2;

	function init(data) {

		if (!inited) {
			inited = true;

			scene = data.scene;

			mesh = createBorder({borderid: '#bakuborder', res: 3000});
			mesh.rotation.y = Math.PI / 2;
			mesh.rotation.z = Math.PI / 2;
			mesh.position.x = -610;
			mesh.position.y = -730;
			scene.add(mesh);

			mesh2 = createBorder({borderid: '#bakuborder2', res: 3000});
			mesh2.rotation.y = Math.PI / 2;
			mesh2.rotation.z = Math.PI / 2;
			mesh2.position.x = 130;
			mesh2.position.y = -800;
			scene.add(mesh2);
		}


		$('body').keydown(function(e) {
			console.log('keyCode: ', e.keyCode);

			if(e.keyCode === 66) {
				mesh.material.visible = !mesh.material.visible;
				mesh2.material.visible =  !mesh2.material.visible;
			}

		});
	}

	function createBorder(data) {
		var vertex = [],
			closedSpline,
			extrudeSettings,
			res = data.res,
			count = 3,
			i = 0,
			pts = [],
			shape,
			geometry,
			material;

		$(data.borderid + ' path').each(function () {
			var path = this,
				length = path.getTotalLength(),
				p = path.getPointAtLength(0),
				diff = length / res,
				size = 1.66;

			for (var i = 1; i < res; i++) {
				p = path.getPointAtLength(i * diff);
				vertex.push(new THREE.Vector3(p.x * size, 0, p.y * size));
			}

		});

		closedSpline = new THREE.ClosedSplineCurve3(vertex);

		extrudeSettings = {
			steps: res,
			bevelEnabled: false,
			extrudePath: closedSpline
		};

		for (i = 0; i < count; i++) {
			var l = 2,
				a = 2 * i / count * Math.PI;

			pts.push(new THREE.Vector2(Math.cos(a) * l, Math.sin(a) * l));
		}

		shape = new THREE.Shape(pts);
		geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);
		material = new THREE.MeshLambertMaterial({
			color: 0x6b142f,
			wireframe: false,
			opacity: 1,
			transparent: true
		});

		return new THREE.Mesh(geometry, material);
	}

	return {
		init: init
	};

})();

var City3d = function (data) {

	var scene,
		camera,
		id,
		name,
		cityName,
		cityObject,
		isSelected = false,
		sphereMesh,
		sphereMaterial,
		torusMaterial,
		cylinderMesh,
		time,
		fire,
		text3d,
		clock = new THREE.Clock(),
		postsData;

	var particles,
		particleMaxHeight = 100,
		particleYOffset = 30,
		customUniforms,
		customAttributes,
		shaderMaterial,
		particleGroup,
		particleEmitter;

	var pointLight,
		pointLight2;

	var raycaster,
		intersects,
		intersectedPost,
		mouse;

	function init() {

		scene = data.scene;
		camera = data.camera;
		id = data.id;
		name = data.name;
		cityName = data.cityname;

		cityObject = new THREE.Object3D();
		cityObject.position.x = data.x;
		cityObject.position.z = data.z;
		cityObject.position.y = data.y;
		scene.add(cityObject);

		createParticlesMaterial();
		createMaterials();
		createSphere();     //click hit!!

		if (data.dateType < 2) {
			createPlane();
		}

		createCylinder();
		addText();

		//Setup raycaster
		raycaster = new THREE.Raycaster();
		mouse = new THREE.Vector2();
		raycaster.params.PointCloud.threshold = 8;

		$('#webgl-content').on('click', onParticleClick);
	}

	function onParticleClick() {

		if (isSelected && intersectedPost !== null && postsData && postsData.data[intersectedPost]) {
			var post = postsData.data[intersectedPost];

			History.pushState({state: 1, rand: Math.random()}, post.title, post.url);
		}

	}

	function setPosts(data) {

		if(!postsData) {
			postsData = data;
		}

		if(!particles) {
			createParticles();
		}

		if(!particleGroup) {
			createParticles2();
		}

	}

	function createParticles() {
		var geometry = new THREE.Geometry(),
			radius = 5,
			vertex;

		var sizes = customAttributes.size.value;

		for (var i = 0; i < postsData.data.length; i++) {
			vertex = new THREE.Vector3();

			var value = Math.random() * 400,
				speed = (Math.random() + 0.5) * 0.06,
				direction = Math.random() > 0.5;

			vertex.x = radius * Math.cos(Math.PI / 10 * value);
			vertex.z = radius * Math.sin(Math.PI / 10 * value);
			vertex.y = Math.random() * particleMaxHeight + particleYOffset;
			vertex.value = value;
			vertex.speed = speed;
			vertex.direction = direction;
			vertex.radius = vertex.originalradius = radius + (Math.random() * 30);
			vertex.selected = false;

			geometry.vertices.push(vertex);

			sizes.push(20);
		}

		particles = new THREE.PointCloud(geometry, shaderMaterial);
		particles.dynamic = true;
		particles.sortParticles = true;
		cityObject.add(particles);

	}

	function createParticlesMaterial() {
		customUniforms = {
			color: {type: 'c', value: new THREE.Color(0xffffff)},
			texture: {type: 't', value: THREE.ImageUtils.loadTexture('i/content/dot_fire.png')}
		};

		customAttributes = {
			size: {type: 'f', value: []},
			customColor: {type: 'c', value: []}
		};

		shaderMaterial = new THREE.ShaderMaterial({
			uniforms: customUniforms,
			attributes: customAttributes,
			vertexShader: document.getElementById('vertexshader').textContent,
			fragmentShader: document.getElementById('fragmentshader').textContent,
			transparent: true,
			alphaTest: 0.5,
			blending: THREE.AdditiveBlending,
			depthWrite: false
		});
	}

	//With plugin!!
	function createParticles2() {
		var startColor,
			middleColor,
			endColor,
			c;

		startColor = new THREE.Color(0xffec13);
		middleColor = new THREE.Color(0xff5400);
		endColor = new THREE.Color(0xa212c1);

		particleGroup = new SPE.Group({
			texture: THREE.ImageUtils.loadTexture('i/content/smokeparticle.png'),
			maxAge: 6
		});

		particleEmitter = new SPE.Emitter({
			type: 'cube',
			position: new THREE.Vector3(0, 15, 0),
			positionSpread: new THREE.Vector3(10, 5, 10),

			acceleration: new THREE.Vector3(0, -2, 0),
			accelerationSpread: new THREE.Vector3(3, 1, 3),

			velocity: new THREE.Vector3(0, 30, 0),
			velocitySpread: new THREE.Vector3(20, 10, 20),

			particleCount: 1200,
			sizeStart: 5,
			sizeStartSpread: 30,
			sizeEnd: 1,
			opacityStart: 0.2,
			opacityMiddle: 1,
			opacityEnd: 0.6,
			colorStart: startColor,
			colorMiddle: middleColor,
			colorEnd: endColor
		});
		particleGroup.addEmitter(particleEmitter);
		cityObject.add(particleGroup.mesh);

	}

	function select() {

		if (!isSelected) {
			isSelected = true;

			if (data.dateType < 2) {
				activateCylinder();
				addLight();
			}

			text3d.onOut();
			text3d.makeSmaller();

			document.addEventListener('mousemove', onDocumentMouseMove, false);
		}

	}

	function deselect() {

		intersectedPost = null;
		isSelected = false;
		text3d.show();

		if (fire) {
			fire.pauseRender();
		}

		if (text3d) {
			text3d.makeNormalSize();
		}

		if (pointLight) {
			cityObject.remove(pointLight);
			cityObject.remove(pointLight2);
			cylinderMesh.material.needsUpdate = true;
		}

		if (particles) {
			cityObject.remove(particles);
			particles = null;
		}

		if (particleGroup) {
			cityObject.remove(particleGroup.mesh);
			particleGroup = null;
		}

		document.removeEventListener('mousemove', onDocumentMouseMove, false);

		deactivateCylinder();
	}

	function activate() {

		if (text3d) {
			text3d.show();
		}

	}

	function deactivate() {
		if (text3d) {
			text3d.hide();
		}

	}

	function onOver() {

		addLight();

		if (text3d) {
			text3d.onOver();
		}

	}

	function onOut() {

		if (!isSelected) {
			cityObject.remove(pointLight);
			cityObject.remove(pointLight2);
			cylinderMesh.material.needsUpdate = true;

			if (text3d) {
				text3d.onOut();
			}

		}

	}

	function show() {
		if (text3d) {
			text3d.show();
		}
	}

	function hide() {
		if (text3d) {
			text3d.hide();
		}
	}

	function addText() {
		return;
		/*text3d = new Text3d({
			scene: cityObject,
			name: cityName,
			type: data.dateType
		});

		text3d.init();*/
	}

	function createMaterials() {

		torusMaterial = new THREE.MeshLambertMaterial({
			color: 0xff5a00,
			side: THREE.DoubleSide,
			opacity: 0.5,
			transparent: true
		});
		sphereMaterial = new THREE.MeshPhongMaterial({
			color: 0xe96f2c,
			opacity: 1,
			side: THREE.DoubleSide,
			transparent: true
		});

	}

	function createCylinder() {

		var material = new THREE.MeshLambertMaterial({
			color: 0x450034
		});

		cylinderMesh = new THREE.Mesh(new THREE.CylinderGeometry(10, 0, 10, 4), material);
		cityObject.add(cylinderMesh);
		cylinderMesh.position.y = 6;
	}

	function activateCylinder() {
		if (cylinderMesh) {
			cylinderMesh.material = new THREE.MeshPhongMaterial({
				color: 0xd23003
			});
			cylinderMesh.material.needsUpdate = true;
		}
	}

	function deactivateCylinder() {
		if (cylinderMesh) {
			cylinderMesh.material = new THREE.MeshLambertMaterial({
				color: 0x450034
			});
			cylinderMesh.material.needsUpdate = true;
		}
	}

	function createPlane() {

		var circleMaterial = new THREE.MeshLambertMaterial({
			color: 0xff5a00,
			side: THREE.DoubleSide,
			map: THREE.ImageUtils.loadTexture('i/content/map_pin_ornament.png'),
			blending: THREE.AdditiveBlending,
			opacity: 1,
			transparent: true
		});

		var mesh = new THREE.Mesh(new THREE.CircleGeometry(30, 50), circleMaterial);
		cityObject.add(mesh);
		mesh.data = {type: 'city', cityname: cityName};
		mesh.rotation.x = -Math.PI / 2;
		mesh.position.y = 0;
	}

	function addLight() {

		if (!pointLight) {
			pointLight = new THREE.PointLight(0xffffff, 1, 100);
			pointLight.position.set(5, 0, 0);
			cityObject.add(pointLight);

			pointLight2 = new THREE.PointLight(0xffffff, 1, 100);
			pointLight2.position.set(-5, 40, 0);
			cityObject.add(pointLight2);
		} else {
			cityObject.add(pointLight);
			cityObject.add(pointLight2);
		}

		cylinderMesh.material.needsUpdate = true;
	}

	function createSphere() {
		var clickHitMaterial = new THREE.MeshBasicMaterial({
			opacity: 0,
			side: THREE.BackSide,
			depthWrite: false,
			depthTest: false,
			alphaTest: 0.5,
			transparent: true
		});

		sphereMesh = new THREE.Mesh(new THREE.SphereGeometry(30, 20, 20), clickHitMaterial);
		sphereMesh.name = cityName;
		sphereMesh.position.y = 30;
		sphereMesh.data = {type: 'city', cityname: cityName};
		cityObject.add(sphereMesh);

	}

	function render() {
		var vertex;

		if (particles && isSelected) {

			if (particleGroup) {
				particleGroup.tick(0.016);
			}

			for (var i = 0; i < particles.geometry.vertices.length; i++) {
				vertex = particles.geometry.vertices[i];

				if (i === intersectedPost) {
					vertex.selected = true;
				} else {
					vertex.selected = false;
				}

				if (!vertex.selected) {
					if (vertex.direction) {
						vertex.value += vertex.speed;
					} else {
						vertex.value -= vertex.speed;
					}

					vertex.radius = vertex.originalradius + vertex.y * 0.3;

					vertex.x = vertex.radius * Math.cos(Math.PI * vertex.value * 0.01);
					vertex.z = vertex.radius * Math.sin(Math.PI * vertex.value * 0.01);
					vertex.y += vertex.speed * 2;

					if (vertex.y > particleMaxHeight + particleYOffset) {
						vertex.y = 0;
						vertex.radius = vertex.originalradius;
					}

					var c = APP.GradientImage.getColorForPercent((vertex.y - particleYOffset) / particleMaxHeight);
					customAttributes.customColor.value[i] = new THREE.Color().setRGB(c[0] / 265, c[1] / 265, c[2] / 265);

				} else {
					customAttributes.customColor.value[intersectedPost] = new THREE.Color(0xffffff);
				}


			}

			particles.geometry.dynamic = true;
			particles.geometry.verticesNeedUpdate = true;
		}

		if (shaderMaterial && isSelected) {
			shaderMaterial.attributes.customColor.needsUpdate = true;
		}

		if (camera && isSelected && raycaster) {
			raycaster.setFromCamera(mouse, camera);

			if (particles) {
				intersects = raycaster.intersectObject(particles);
			}

			if (intersects && intersects.length > 0) {

				if (intersectedPost !== intersects[0].index) {
					intersectedPost = intersects[0].index;
				}

			} else if (intersectedPost !== null) {
				intersectedPost = null;
			}

			updateIntersected();

		}

	}

	function updateIntersected() {

		if (intersectedPost !== null) {
			$('#webgl-content').addClass('cursor-pointer');
		} else {
			$('#webgl-content').removeClass('cursor-pointer');
		}
	}

	function setPosition(data) {
		if (data.x) {
			cityObject.position.x = data.x;
		}
		if (data.z) {
			cityObject.position.z = data.z;
		}
		if (data.y) {
			cityObject.position.y = data.y;
		}
	}

	function getPosition() {
		return {x: cityObject.position.x, y: cityObject.position.y, z: cityObject.position.z};
	}

	function onDocumentMouseMove(event) {

		event.preventDefault();

		mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
		mouse.y = -( event.clientY / window.innerHeight ) * 2 + 1;

	}

	return {
		init: init,
		render: render,
		setPosts: setPosts,
		getCityId: function () {
			return id;
		},
		getMesh: function () {
			return cityObject;
		},
		cityname: function () {
			return cityName;
		},
		name: function () {
			return name;
		},
		getPosition: getPosition,
		setPosition: setPosition,
		select: select,
		deselect: deselect,
		activate: activate,
		deactivate: deactivate,
		onOver: onOver,
		onOut: onOut,
		show: show,
		hide: hide
	};

};


APP.ElevationData = (function () {

	var exports,
		elevationData = {};

	function init() {
	}

	function initElevationMaps() {
		var count = 0;

		return new Promise(function (resolve, reject) {

			loadElevationMap({imageURL: 'i/content/azerelevation_map_small2.jpg', matrix: true})
				.then(function (response) {
					elevationData.country = response;

					count++;
					if (count > 1) {
						resolve();
					}
				});

			loadElevationMap({imageURL: 'i/content/earth_bump2.jpg'})
				.then(function (response) {
					elevationData.earthmap = response;

					count++;
					if (count > 1) {
						resolve();
					}
				});
		});


	}

	function loadElevationMap(data) {

		return new Promise(function (resolve, reject) {
			var img = new Image(),
				elevationData = {};

			elevationData.elevationArray = [];

			img.onload = function () {
				var imgCanvas = document.createElement('canvas'),
					ctx = imgCanvas.getContext('2d'),
					imgW = this.width,
					imgH = this.height,
					pixels,
					index = 0,
					r,
					g,
					b,
					a,
					sum;

				imgCanvas.width = imgW;
				imgCanvas.height = imgH;

				elevationData.imgW = imgW;
				elevationData.imgH = imgH;

				ctx.drawImage(this, 0, 0);
				pixels = ctx.getImageData(0, 0, imgW, imgH).data;

				for (var x = 0; x < imgW; x++) {

					if (data.matrix) {
						elevationData.elevationArray[x] = [];
					}

					for (var y = 0; y < imgH; y++) {
						r = pixels[index];
						g = pixels[index + 1];
						b = pixels[index + 2];
						a = pixels[index + 3];
						index = (x * 4) + y * (4 * imgW);
						sum = r + g + b;

						if (data.matrix) {
							if (sum > 43) {
								elevationData.elevationArray[x].push({
									x: x - imgW / 2,
									y: y - imgH / 2,
									scale: sum,
									active: true
								});
							} else {
								elevationData.elevationArray[x].push({
									x: x - imgW / 2,
									y: y - imgH / 2,
									scale: sum,
									active: false
								});
							}
						} else {
							if (sum > 43) {
								elevationData.elevationArray.push({
									x: x - imgW / 2,
									y: y - imgH / 2,
									scale: sum,
									active: true
								});
							} else {
								elevationData.elevationArray.push({
									x: x - imgW / 2,
									y: y - imgH / 2,
									scale: 0,
									active: false
								});
							}


						}


					}

				}

				resolve(elevationData);

			};

			img.src = data.imageURL;
		});


	}

	function getElevationData(map) {
		if (elevationData.hasOwnProperty(map)) {
			return elevationData[map];
		} else {
			console.warn('there is no ', map);
			return null;
		}
	}

	exports = {
		init: init,
		initElevationMaps: initElevationMaps,
		getElevationData: getElevationData
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();


var Fire = function (data) {

	var scene,
		camera,
		mesh,
		needRender = true,
		clock = new THREE.Clock(),
		uniforms,
		shaderMaterial;

	function init() {
		scene = data.scene;
		camera = data.camera;

		var vShader = $('#vertexshader2'),
			fShader = $('#fragmentshader2');

		uniforms = {
			iGlobalTime: {type: 'f', value: 0.1}
		};

		shaderMaterial = new THREE.ShaderMaterial({
			uniforms: uniforms,
			vertexShader: vShader.text(),
			fragmentShader: fShader.text(),
			blending: THREE.AdditiveBlending,
			transparent: true,
			side: THREE.DoubleSide,
			depthWrite: true,
			depthTest: false,
			alphaTest: 0.5
		});

		mesh = new THREE.Mesh(new THREE.PlaneGeometry(50, 150, 1, 1), shaderMaterial);
		mesh.dynamic = true;
		mesh.position.y = 85;
		mesh.rotation.y = Math.PI / 2;
		scene.add(mesh);
	}

	function pauseRender() {
		needRender = false;
		if(scene) {
			scene.remove(mesh);
		}


	}

	function resumeRender() {
		needRender = true;
		if(scene) {
			scene.add(mesh);
		}

	}

	function render() {
		if (needRender) {
			var dt = clock.getDelta();

			if (shaderMaterial) {
				uniforms.iGlobalTime.value += dt / 2;
			}
		}

	}

	return {
		init: init,
		pauseRender: pauseRender,
		resumeRender: resumeRender,
		render: render
	};

};


APP.Globe3d = (function () {

	var scene,
		camera,
		world,
		worldContainer,
		worldSphere,
		debug = false,
		particles,
		earthElevationArray = [],
		playPhaseTimeout;

	var lineGeometry,
		spline,
		line,
		lineMaterial,
		splinePoints,
		lineAnim = {segment: 0},
		segment = 0;

	function init(data) {
		scene = data.scene;
		camera = data.camera;
	}

	function initAnimation() {

		camera.position.x = -2500;
		camera.position.z = -1000;
		world.rotation.y = 5;
		worldSphere.material.needsUpdate = true;
		worldSphere.material.opacity = 0;
		particles.material.opacity = 0;
		next('start', 2000);
		//next('end', 1000);
	}

	function skipAnimation() {
		next('end', 100);
	}

	function playPhase(phase) {

		switch (phase) {
			case 'start':

				TweenLite.to(particles.material, 2, {opacity: 1});
				TweenLite.to(worldSphere.material, 2, {opacity: 0.2});

				TweenLite.to(camera.position, 8, {
					x: 0,
					z: 1300,
					ease: SlowMo.easeInOut
				});

				TweenLite.to(world.rotation, 10, {
					y: -Math.PI / 2,
					ease: SlowMo.easeInOut
				});

				TweenLite.to(camera.position, 6, {
					z: 700,
					delay: 6,
					ease: Expo.easeInOut
				});

				next('line', 10000);
				break;

			case 'line':
				addLine();
				TweenMax.to(lineAnim, 5, {
					segment: splinePoints.length,
					roundProps: 'segment',
					onUpdate: addLineSegment,
					ease: Expo.easeInOut
				});
				TweenLite.to(world.rotation, 5, {
					y: -Math.PI / 2 - 0.5,
					ease: Expo.easeInOut
				});

				next('zoom', 2000);

				break;


			case 'zoom':
				TweenLite.to(camera.position, 2.5, {
					z: 400,
					y: 120,
					ease: Expo.easeIn
				});

				TweenLite.to(particles.material, 0.5, {
					delay: 2,
					opacity: 0
				});

				next('end', 2500);

				break;

			case 'end':
				removeGlobe();

				setTimeout(function() {
					$('body').removeClass('globe-animation');
				}, 1500);

				APP.Map3d.initAfterAnimation();
				break;
		}
	}

	function next(phase, delay) {
		clearTimeout(playPhaseTimeout);

		playPhaseTimeout = setTimeout(function () {
			playPhase(phase);
		}, delay);
	}

	function removeGlobe() {

		worldContainer.remove(particles);
		worldContainer.remove(worldSphere);

		world.remove(worldContainer);
		scene.remove(world);

		particles.geometry.dispose();
		worldSphere.geometry.dispose();

		if (line) {
			worldContainer.remove(line);
			line.geometry.dispose();
			line = null;
		}

		particles = null;
		worldSphere = null;

	}

	function addLine() {
		lineMaterial = new THREE.LineBasicMaterial({
			color: 0xc53236,
			//color: 0xe96326,
			linewidth: 2.0,
			opacity: 1,
			fog: false
		});

		lineGeometry = new THREE.Geometry();
		lineGeometry.dynamic = true;

		spline = new THREE.SplineCurve3([
			new THREE.Vector3(340, 40, 370),
			new THREE.Vector3(300, 150, 400),
			new THREE.Vector3(280, 270, 350)
		]);
		splinePoints = spline.getPoints(100);

		for (var j = 0; j < splinePoints.length; j++) {
			lineGeometry.vertices.push(splinePoints[0]);
		}

		line = new THREE.Line(lineGeometry, lineMaterial, THREE.LineStrip);
		worldContainer.add(line);
	}

	function addLineSegment() {
		var segment = lineAnim.segment;

		if (splinePoints && segment < splinePoints.length) {
			lineGeometry.vertices[segment] = splinePoints[segment];

			for (var i = 0; i < splinePoints.length; i++) {
				if (i >= segment) {
					lineGeometry.vertices[i] = splinePoints[segment];
				} else {
					lineGeometry.vertices[i] = splinePoints[i];
				}
			}

			lineGeometry.verticesNeedUpdate = true;
		}
	}

	function initWorldParticles() {
		scene.fog = new THREE.Fog(0x19081b, 400, 1300);

		earthElevationArray = APP.ElevationData.getElevationData('earthmap').elevationArray;

		world = new THREE.Object3D();
		world.rotation.y = -Math.PI / 2;
		scene.add(world);

		worldContainer = new THREE.Object3D();
		worldContainer.rotation.x = -Math.PI / 2;
		worldContainer.rotation.y = 0.7;
		worldContainer.rotation.z = -0.1;
		world.add(worldContainer);

		var material = new THREE.PointCloudMaterial({
			//color: 0xe4173e,
			color: 0x34063e,
			size: 4,
			map: THREE.ImageUtils.loadTexture('i/content/dot.png'),
			blending: THREE.AdditiveBlending,
			depthWrite: false,
			transparent: true
		});

		var geom = new THREE.Geometry(),
			radius = 500,
			wStep = Math.PI * 2 / 1024,
			hStep = Math.PI / 512;

		for (var i = 0; i < earthElevationArray.length; i++) {
			var x = earthElevationArray[i].x * wStep,
				y = earthElevationArray[i].y * hStep,
				s = earthElevationArray[i].scale / (255 * 3),
				vertex = new THREE.Vector3();

			vertex.x = radius * Math.cos(y) * Math.cos(x);
			vertex.y = radius * Math.cos(y) * Math.sin(x);
			vertex.z = radius * -Math.sin(y);

			vertex.multiplyScalar(1 + s / 10);

			if (earthElevationArray[i].active) {
				geom.vertices.push(vertex);
			}

		}
		particles = new THREE.PointCloud(geom, material);
		worldContainer.add(particles);

		var geometry = new THREE.SphereGeometry(450, 40, 40);
		var material2 = new THREE.MeshPhongMaterial({color: 0x6b142f, transparent: true, opacity: 0.3});
		worldSphere = new THREE.Mesh(geometry, material2);
		worldContainer.add(worldSphere);

		camera.lookAt(worldSphere.position);

	}

	function render() {

		if (worldSphere) {
			camera.lookAt(worldSphere.position);
		}

	}

	return {
		init: init,
		initAnimation: initAnimation,
		skipAnimation: skipAnimation,
		initWorldParticles: initWorldParticles,
		render: render
	};

})();
/**
 * WebGL handling class
 *
 * @namespace APP
 * @name APP.WebGL
 */
APP.WebGL = (/** @lends APP.WebGL */function () {
	var exports,
		inited = false,
		$body,
		oculus = false,
		windowIsActive = true;

	//threejs things
	var scene,
		camera,
		effect,
		needRender = true,
		introAnimation = false,
		renderTimer,
		renderer;

	//scenes!
	var skybox,
		map3d,
		globe3d;


	/**
	 * Initialize Post handling
	 */
	function init() {
		APP.GradientImage.init();

		window.gui = new dat.GUI({height: 5 * 32 - 1});

		if ($('#webgl-content').length) {
			$('body').addClass('globe-animation');

			initDOMElements();
			initBindings();
			//initThreejs();
		}
	}

	/**
	 * Init DOM elements
	 */
	function initDOMElements() {
		$body = APP.Performance.getCachedDOM().$body;

	}

	/**
	 * Init indings
	 */
	function initBindings() {

		$body.on({
			'click': function () {
				var zoomType = $(this).attr('data-webgl-control');

				if (zoomType === 'zoomin') {
					map3d.zoomIn();

				} else if (zoomType === 'zoomout') {
					map3d.zoomOut();
				}

			}
		}, '[data-webgl-control]');

		$body.on({
			'click': function () {
				APP.Globe3d.skipAnimation();
				window.setCookie('webglskipped', 'true', 4);
			}
		}, '[data-skip-intro]');

		$body.on({
			'click': function () {
				window.setCookie('webglskipped', 'false', 4);
				window.location.reload();
			}
		}, '[data-show-intro]');


		windowIsActive = true;

		$(window).focus(function () {
			windowIsActive = true;

			clearTimeout(renderTimer);
			if (map3d && map3d.isZoomedToCity()) {
				needRender = true;
			} else {
				setRenderTimeout(2000, 'focus');
			}

		});

		$(window).blur(function () {
			if (!introAnimation) {
				windowIsActive = false;
				setRenderTimeout(40, 'blur');
			}

		});

		$('body').keydown(function (e) {

			if (e.keyCode === 79) {
				oculus = !oculus;

				if(!oculus) {
					renderer.setSize(window.innerWidth, window.innerHeight);
				}

			}

		});
	}

	function onCitiesLoaded() {
		initThreejs();
	}

	/**
	 * THREE.js functions
	 */
	function initThreejs() {
		var weblgSkipped = window.getCookie('webglskipped') === 'true';

		scene = new THREE.Scene();

		renderer = new THREE.WebGLRenderer({antialias: true, clearColor: 0x000000});
		renderer.setSize(window.innerWidth, window.innerHeight);
		renderer.setClearColor(0xdedede, 1);
		window.renderer = renderer;
		document.getElementById('webgl-content').appendChild(renderer.domElement);

		initCamera();
		initLights();

		effect = new THREE.OculusRiftEffect(renderer, {worldScale: 1});
		effect.setSize(window.innerWidth, window.innerHeight);

		skybox = APP.SkyBox3d;
		skybox.init({scene: scene});

		globe3d = APP.Globe3d;
		globe3d.init({scene: scene, camera: camera});

		APP.ElevationData.init();
		APP.ElevationData.initElevationMaps().then(function () {
			needRender = true;
			introAnimation = true;

			var hash = History.getState().hash,
				mainPage = APP.History.getCurrentPage().page[0] === 'home';

			init3dMap();

			if (!weblgSkipped && mainPage) {
				globe3d.initWorldParticles();
				globe3d.initAnimation();

				setRenderTimeout(-1, 'introAnim');
			} else {
				setTimeout(function () {
					$('body').removeClass('globe-animation');
				}, 1500);

				if (map3d) {
					APP.Map3d.initAfterAnimation();
				} else {
					setTimeout(function () {
						if (map3d) {
							APP.Map3d.initAfterAnimation();
						}
					}, 500);
				}
			}

		});

		needRender = true;
		render();

		window.addEventListener('resize', onWindowResize, false);
		inited = true;
	}

	function init3dMap() {
		map3d = APP.Map3d;
		map3d.init({scene: scene, camera: camera});
		map3d.initTerrain();

		if (!map3d.citiesLoaded() && APP.Model.getCityList().length > 0) {
			//map3d.createCity();
			console.log('createcTiy');
		}
	}

	function filterCities(data) {
		if (map3d) {
			map3d.filterCities(data);
		}
	}

	function removeFilterCities() {
		if (map3d) {
			map3d.removeFilterCities();
		}
	}

	function initCamera() {
		camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 1, 10000);
		window.camera = camera;
	}

	function initLights() {
		var ambientLight = new THREE.AmbientLight(0x000000);
		//var ambientLight = new THREE.AmbientLight(0xffffff);
		scene.add(ambientLight);

		var pointLight = new THREE.PointLight(0xffffff, 1, 0);
		pointLight.position.set(0, 500, 0);
		scene.add(pointLight);
	}

	function onWindowResize() {
		renderer.setSize(window.innerWidth, window.innerHeight);
		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();
		needRender = true;
	}

	/**
	 *  Kill render after x ms!
	 */
	function setRenderTimeout(time, from) {
		needRender = true;
		clearTimeout(renderTimer);
		//console.log('setRenderTimeout, ', time, ', from: ' , from);

		if (time > 0) {
			renderTimer = setTimeout(function () {
				if (!introAnimation) {
					console.log('stop anmation');
				}
			}, time);
		}

	}

	function render() {

		if (needRender) {

			if (map3d) {
				map3d.render();
			}

			if (globe3d) {
				globe3d.render();
			}

			//renderer.render(scene, camera);

			if (oculus) {
				effect.render(scene, camera);
			} else {
				renderer.render(scene, camera);
			}
		}

		requestAnimationFrame(render);
	}

	exports = {
		init: init,
		inited: function () {
			return inited;
		},
		setIntroAnimation: function (val) {
			introAnimation = val;
		},
		getIntroAnimationState: function () {
			return introAnimation;
		},
		filterCities: filterCities,
		removeFilterCities: removeFilterCities,
		onCitiesLoaded: onCitiesLoaded,
		init3dMap: init3dMap,
		isZoomedToCity: function () {
			if (map3d) {
				return map3d.isZoomedToCity();
			}
			return false;
		},
		getMap3d: function () {
			return map3d;
		},
		zoomOut: function () {
			if (map3d) {
				map3d.zoomOut('start'); //zoom out to the start position
			}
		},
		pauseRender: function () {
			needRender = false;
		},
		resumeRender: function () {
			needRender = true;
		},
		setRenderTimeout: setRenderTimeout
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();


APP.Map3d = (function () {

	var exports,
		scene,
		$body,
		worldContainer,
		worldSphere,
		world,
		allCitiesLoaded = false,
		disableCitySelect = false,
		debug = true,
		needRender = true,
		camera,
		cameraPositions = [
			{x: 0, y: 900, z: 200, fognear: 2000, fogfar: 3000},
			{x: 0, y: 500, z: 250, fognear: 400, fogfar: 1000},
			{
				x: 0,
				y: 200,
				z: 300,
				fognear: 100,
				fogfar: 750
			}],
		cameraTarget,
		cameraPositionDragHelper = {},  //helper for saving camera settings for draggin
		cameraState = 0,
		zoomedToCity = false,
		cityScene,
		selectedCity,
		city3dList = [],
		raycaster,
		mouseVector,
		isMouseDown = false,
		mouseX = 0,
		mouseY = 0;

	var border3D,
		terrain3D;

	var cityLines = [],
		currentLineAnimated = 0;

	var controls;

	function init(data) {

		scene = data.scene;
		camera = data.camera;


		initWorld();
		initFog();

		terrain3D = APP.Terrain3d;
		terrain3D.init({scene: worldContainer});

		border3D = APP.Border3d;
		border3D.init({scene: worldContainer});

		raycaster = new THREE.Raycaster();
		mouseVector = new THREE.Vector2();

		controls = new THREE.OrbitControls(camera);
		//controls.addEventListener('change', render);
	}

	function initAfterAnimation() {
		var hash = History.getState().hash,
			mainPage = hash === '/' || hash === '' || hash === '/en/' || hash === '/az/';

		scene.add(world);
		scene.add(cityScene);
		initBindings();
		initCameraTarget();
		initFog();


		setTimeout(function () {
			animateNextCityLine();
		}, 1500);

		if (mainPage) {
			setTimeout(function () {
				APP.Main.getIntroSceen();
			}, 4500);
		}


		setTimeout(function () {
			APP.WebGL.setIntroAnimation(false);
		}, 5000);

	}

	function initTerrain() {
		if (terrain3D) {
			terrain3D.createMapTerrain();
		}
	}

	function initBindings() {
		$body = APP.Performance.getCachedDOM().$body;

		//document.addEventListener('mousedown', onMouseDown, false);
		//document.addEventListener('mousemove', onMouseMove, false);
		//document.addEventListener('mousewheel', onMouseWheel, false);
		//document.addEventListener('DOMMouseScroll', onMouseWheel, false);

		$body.on({
			'click': onClick
		}, '#webgl-content');

	}

	function initWorld() {
		world = new THREE.Object3D();
		world.rotation.y = -Math.PI / 2;
		//scene.add(world);

		worldContainer = new THREE.Object3D();
		worldContainer.rotation.x = -Math.PI / 2;
		world.add(worldContainer);
	}

	function initCameraTarget() {
		cameraTarget = new THREE.Mesh(new THREE.BoxGeometry(5, 5, 5), new THREE.MeshBasicMaterial({
			opacity: 0,
			side: THREE.BackSide,
			depthWrite: false,
			depthTest: false,
			alphaTest: 0.5,
			transparent: true
		}));
		cameraTarget.position.y = 60;
		scene.add(cameraTarget);

		TweenLite.to(camera.position, 3, {x: cameraPositions[0].x, y: cameraPositions[0].y, z: cameraPositions[0].z});
	}

	function initFog() {
		scene.fog = new THREE.Fog(0x19081b, cameraPositions[0].fognear, cameraPositions[0].fogfar);
	}

	/**
	 *  Create cities
	 */

	function createCities() {
		var cityListData = APP.Model.getCityList(),
			city,
			city2,
			city3d,
			lineMaterial;

		cityScene = new THREE.Object3D();
		//scene.add(cityScene);

		lineMaterial = new THREE.LineBasicMaterial({
			color: 0xa61137,
			linewidth: 2.0,
			fog: true
		});

		for (var i = 0; i < cityListData.length; i++) {

			var line,
				lineGeometry = new THREE.Geometry(),
				verticesTemp = [];

			city = cityListData[i];

			city3d = new City3d({
				camera: camera,
				scene: cityScene,
				id: city.id,
				dateType: city.eventDateType,
				x: parseInt(city.x, 10),
				z: parseInt(city.z, 10),
				y: parseInt(city.y, 10),
				name: 'city' + i,
				cityname: city.shortTitle,
				cityurlname: city.name
			});

			city3d.init();
			city3dList.push(city3d);

			//Line between cities!
			if (city.eventDateType < 2) {
				city2 = APP.Model.getCityById(city.connectTo);

				if (city.connectTo && city2) {

					if (i < 2) {
						var spline = new THREE.SplineCurve3([
								new THREE.Vector3(city.x, city.y, city.z),
								new THREE.Vector3((city2.x + city.x) / 2, 300, (city2.z + city.z) / 2),
								new THREE.Vector3(city2.x, city2.y, city2.z)

							]),
							splinePoints = spline.getPoints(50);

						for (var j = 0; j < splinePoints.length; j++) {
							lineGeometry.vertices.push(splinePoints[0]);
							verticesTemp.push(splinePoints[j].clone());
						}

					} else {
						lineGeometry.vertices.push(new THREE.Vector3(city.x, city.y, city.z));
						lineGeometry.vertices.push(new THREE.Vector3(city.x, city.y, city.z));
						//lineGeometry.vertices.push(new THREE.Vector3(city2.x, city2.y, city2.z));

						verticesTemp.push(new THREE.Vector3(city.x, city.y, city.z));
						verticesTemp.push(new THREE.Vector3(city2.x, city2.y, city2.z));
					}

				}

				line = new THREE.Line(lineGeometry, lineMaterial, THREE.LinePieces);
				line.verticesTemp = verticesTemp;
				cityScene.add(line);
				cityLines.push(line);
			}

		}

		allCitiesLoaded = true;
	}

	function animateNextCityLine() {

		if (cityLines.length === 0) {
			return;
		}

		var fly = (currentLineAnimated < 2),
			line = cityLines[currentLineAnimated],
			duration = fly ? 1 : 0.1;

		line.segment = 0;
		line.totalSegments = line.geometry.vertices.length;

		TweenMax.to(line, duration, {
			segment: fly ? line.totalSegments : 100,
			roundProps: 'segment',
			onUpdate: function () {
				animateLineSegments(line, fly);
			},
			onComplete: function () {
				disposeLineTempSegments(line);

				if (currentLineAnimated < cityLines.length - 1) {
					currentLineAnimated++;
					animateNextCityLine();
				}

			},
			ease: Sine.easeInOut
		});

	}

	function animateLineSegments(line, fly) {

		if (fly) {
			for (var i = 0; i < line.totalSegments; i++) {
				if (i >= line.segment) {
					line.geometry.vertices[i] = line.verticesTemp[line.segment];
				} else {
					line.geometry.vertices[i] = line.verticesTemp[i];
				}

			}
		} else {
			line.geometry.vertices[1] = line.verticesTemp[0].lerp(line.verticesTemp[1], line.segment / 100);
		}


		line.geometry.verticesNeedUpdate = true;
	}

	function disposeLineTempSegments(line) {
		if (line.verticesTemp) {
			line.verticesTemp = null;
		}
	}

	function gotoCity(city) {

		var duration = 2,
			delay = 0;

		zoomedToCity = true;
		cameraState = cameraPositions.length;
		selectedCity = city;

		/*TweenLite.to(cameraTarget.position, duration, {
			x: city.getPosition().x,
			z: city.getPosition().z,
			y: city.getPosition().y + 80,
			ease: Expo.easeOut,
			delay: delay
		});
		TweenLite.to(camera.position, duration, {
			x: city.getPosition().x + 100,
			z: city.getPosition().z + 50,
			y: 100,
			ease: Expo.easeOut,
			delay: delay
		});*/

		city.select();

		for (var i = 0; i < city3dList.length; i++) {

			if (city3dList[i].cityname() !== city.cityname()) {
				city3dList[i].deselect();
				city3dList[i].deactivate();
			}

		}

		disableCitySelect = true;
		updateMaterials();

		APP.Model.getPostByCityId(city.getCityId(), postByCityLoaded);

	}

	function postByCityLoaded(data) {
		selectedCity.setPosts(data);
		setRenderTimeout(-1, 'postByCityLoaded');
	}

	/**
	 *
	 *  @public: zoom near city (from outside)
	 *
	 */
	function zoomCity(cityId) {
		var city = APP.Model.getCityById(cityId),
			duration = 2,
			delay = 0;

		needRender = true;
		//cameraState = cameraPositions.length;

		gotoCity(getCityByName(city.name));

		/*TweenLite.to(cameraTarget.position, duration, {
		 x: city.x,
		 z: city.z,
		 y: city.y + 80,
		 ease: Expo.easeOut,
		 delay: delay
		 });

		 TweenLite.to(camera.position, duration, {
		 x: city.x,
		 z: city.z + 100,
		 y: 200,
		 ease: Expo.easeOut,
		 delay: delay

		 });

		 setRenderTimeout(3000, 'zoomCity');*/

	}

	function zoomIn() {
		if (cameraState < cameraPositions.length - 1) {
			cameraState++;
			updateCameraPosition();
		}
	}

	function zoomOut(state) {

		if (state && state === 'start') {
			cameraState = 0;
		}

		if (cameraState > 0) {
			cameraState--;
		}

		updateCameraPosition();
	}

	function updateCameraPosition() {
		needRender = true;

		TweenLite.to(camera.position, 2, {
			x: cameraPositions[cameraState].x,
			z: cameraPositions[cameraState].z,
			y: cameraPositions[cameraState].y,
			ease: Expo.easeOut
		});

		TweenLite.to(cameraTarget.position, 2, {
			x: cameraPositions[cameraState].x,
			z: cameraPositions[cameraState].z - 300,
			ease: Expo.easeOut
		});

		if (scene.fog) {
			TweenLite.to(scene.fog, 2, {
				far: cameraPositions[cameraState].fogfar,
				near: cameraPositions[cameraState].fognear,
				ease: Expo.easeOut
			});
		}

		if (zoomedToCity) {
			zoomedToCity = false;
			disableCitySelect = false;
			selectedCity.deselect();

			for (var i = 0; i < city3dList.length; i++) {
				city3dList[i].activate();
			}

			TweenLite.to(cameraTarget.position, 2, {
				x: 0,
				z: 0,
				y: 60,
				ease: Expo.easeOut
			});
		}

		if (cameraState === 0) {
			TweenLite.to(cameraTarget.position, 2, {
				x: 0,
				z: 0,
				y: 60,
				ease: Expo.easeOut
			});
		}

		setRenderTimeout(3000, 'updateCameraPosition');
	}

	function onMouseDown(event) {

		if (!zoomedToCity && event.target === document.querySelector('#webgl-content canvas')) {
			isMouseDown = true;

			mouseX = event.clientX;
			mouseY = event.clientY;

			cameraPositionDragHelper = {
				cx: parseInt(camera.position.x, 10),
				cz: parseInt(camera.position.z, 10),
				ctx: parseInt(cameraTarget.position.x, 10),
				ctz: parseInt(cameraTarget.position.z, 10)
			};

			document.addEventListener('mouseup', onMouseUp, false);
		}

	}

	function onMouseMove(event) {
		var i = 0;

		if (!zoomedToCity && isMouseDown) {
			var _mouseX = ( mouseX - event.clientX  ),
				_mouseY = ( mouseY - event.clientY  ),
				targetX = cameraPositionDragHelper.ctx + _mouseX,
				targetY = cameraPositionDragHelper.ctz + _mouseY,
				moveMap = true;

			if (cameraState === 0) {
				if (targetX < -250 || targetX > 200 || targetY < -350 || targetY > 60) {
					moveMap = false;
				}
			} else if (cameraState === 1) {
				if (targetX < -550 || targetX > 600 || targetY < -630 || targetY > 320) {
					moveMap = false;
				}
			} else if (cameraState === 2) {
				if (targetX < -680 || targetX > 660 || targetY < -680 || targetY > 428) {
					moveMap = false;
				}
			}

			if (moveMap) {
				TweenMax.to(cameraTarget.position, 0.2, {
					x: targetX,
					z: targetY
				});

				TweenMax.to(camera.position, 0.2, {
					x: cameraPositionDragHelper.cx + _mouseX,
					z: cameraPositionDragHelper.cz + _mouseY
				});

				needRender = true;
				setRenderTimeout(1500, 'onMouseMove, mousedown, !zoomedCity');

				$('#webgl-content').addClass('cursor-move');
			}

		} else {

			var cityData = checkIntersect(true),
				city;

			$('#webgl-content').removeClass('cursor-move');

			if (cityData) {

				if (!disableCitySelect) {
					needRender = true;

					city = getCityByName(cityData.cityname.toLowerCase());
					city.onOver();
					updateMaterials();

					for (i = 0; i < city3dList.length; i++) {
						if (city3dList[i] !== city) {
							city3dList[i].onOut();
						}
					}

					setRenderTimeout(200, 'onMouseMove');
					$('#webgl-content').addClass('cursor-pointer');

				}


			} else {
				for (i = 0; i < city3dList.length; i++) {
					city3dList[i].onOut();
				}

				$('#webgl-content').removeClass('cursor-pointer');
			}

		}

		mouseVector.x = ( event.clientX / window.innerWidth ) * 2 - 1;
		mouseVector.y = -( event.clientY / window.innerHeight ) * 2 + 1;
	}

	function onMouseUp() {
		isMouseDown = false;
		document.removeEventListener('mouseup', onMouseUp, false);
	}

	function onMouseWheel(event) {

		if (event.target === document.querySelector('#webgl-content canvas')) {
			var delta = 0;
			if (event.wheelDelta) { // WebKit / Opera / Explorer 9
				delta = event.wheelDelta;
			} else if (event.detail) { // Firefox
				delta = -event.detail;
			}

			if (delta > 0) {
				zoomIn();
			} else {
				zoomOut();
			}
		}


	}

	function onClick() {
		var cityData = checkIntersect(true),
			city,
			lang = APP.History.getCurrentLang();

		if (cityData && !disableCitySelect) {
			city = getCityByName(cityData.cityname.toLowerCase());

			History.pushState({
				state: 1,
				rand: Math.random()
			}, cityData.cityname, '/' + lang + '/city/' + cityData.cityname.toLowerCase());

			needRender = true;
		}
	}

	/**
	 *
	 *  Public: filterCities
	 *  data- city Id array!
	 *  Show only the selected cities!
	 *
	 */
	function filterCities(data) {
		var city,
			selected = false;


		needRender = true;
		setRenderTimeout(1000, 'filterCities');

		for (var i = 0; i < city3dList.length; i++) {

			city = city3dList[i];
			selected = false;

			for (var j = 0; j < data.result.length; j++) {

				if (city.getCityId().toLowerCase() === data.result[j].cityID.toLowerCase()) {
					selected = true;
				}
			}

			if (selected) {
				city.onOver();
			} else {
				city.hide();
				city.onOut();
			}

		}

		updateMaterials();

	}

	function removeFilterCities() {

		needRender = true;
		setRenderTimeout(1000, 'removeFilterCities');

		for (var i = 0; i < city3dList.length; i++) {
			city3dList[i].onOut();
			city3dList[i].show();

		}
	}

	function updateMaterials() {
		if (terrain3D) {
			terrain3D.updateMaterials();
			needRender = true;
		}

	}

	function checkIntersect(returnCityBack) {

		var data,
			cityData,
			i = 0,
			intersects;

		raycaster.setFromCamera(mouseVector, camera);

		if (city3dList.length > 0) {
			intersects = raycaster.intersectObjects(cityScene.children, true);

			if (intersects.length > 0) {

				for (i = 0; i < intersects.length; i++) {
					data = intersects[i].object.data;

					if (data && data.type === 'city') {
						cityData = data;
					}

				}

			}
		}

		if (returnCityBack) {
			return cityData;
		}

	}

	function render() {

		if (city3dList) {
			for (var i = 0; i < city3dList.length; i++) {
				city3dList[i].render();
			}
		}

		if (cameraTarget) {
			camera.lookAt(cameraTarget.position);
		}

		camera.updateMatrix();
		camera.updateMatrixWorld();

		if(controls) {
			controls.update();
		}


	}

	function setRenderTimeout(delay) {
		APP.WebGL.setRenderTimeout(delay);
	}

	/**
	 *  Helpers
	 */

	function getCityByName(name) {
		for (var i = 0; i < city3dList.length; i++) {
			var city = city3dList[i];

			if (city.cityname().toLowerCase() === name.toLowerCase()) {
				return city;
			}
		}
	}

	exports = {
		init: init,
		initTerrain: initTerrain,
		initAfterAnimation: initAfterAnimation,
		animateNextCityLine: animateNextCityLine,
		render: render,
		isZoomedToCity: function () {
			return zoomedToCity;
		},
		zoomIn: zoomIn,
		zoomOut: zoomOut,
		getSelectedCityId: function () {
			return selectedCity.getCityId();
		},
		getCityByName: getCityByName,
		citiesLoaded: function () {
			return allCitiesLoaded;
		},
		createCity: createCities,
		gotoCity: gotoCity,
		zoomCity: zoomCity,
		filterCities: filterCities,
		removeFilterCities: removeFilterCities,
		getState: function () {
			return cameraState;
		}
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();

APP.SkyBox3d = (function () {

	var scene,
		urlPrefix = 'i/content/',
		urls = [urlPrefix + 'sky_sides.jpg', urlPrefix + 'sky_sides.jpg',
			urlPrefix + 'sky_down.jpg', urlPrefix + 'sky_down.jpg',
			urlPrefix + 'sky_sides.jpg', urlPrefix + 'sky_sides.jpg'],
		textureCube,
		shader,
		uniforms,
		material,
		geometry,
		skybox;

	function init(data) {
		scene = data.scene;

		textureCube = THREE.ImageUtils.loadTextureCube(urls);
		shader = THREE.ShaderLib.cube;
		uniforms = THREE.UniformsUtils.clone(shader.uniforms);
		uniforms.tCube.value = textureCube;

		material = new THREE.ShaderMaterial({
			fragmentShader: shader.fragmentShader,
			vertexShader: shader.vertexShader,
			uniforms: uniforms,
			side: THREE.BackSide
		});

		var materialArray = [];
		for (var i = 0; i < urls.length; i++) {
			materialArray.push(new THREE.MeshBasicMaterial({
				map: THREE.ImageUtils.loadTexture(urls[i]),
				side: THREE.BackSide
			}));
		}

		var skyMaterial = new THREE.MeshFaceMaterial(materialArray);

		geometry = new THREE.BoxGeometry(6000, 6000, 6000, 1, 1, 1);
		skybox = new THREE.Mesh(geometry, skyMaterial);
		scene.add(skybox);

		window.skybox = skybox;

		$('body').keydown(function(e) {
			if(e.keyCode === 83) {
				skybox.visible = !skybox.visible;
			}
		});
	}

	return {
		init: init
	};

})();
APP.Terrain3d = (function () {

	var scene,
		data,
		countryElevationArray = [],
		particles,
		mapLineMesh,
		mapTerrainMesh;

	function init(data) {
		scene = data.scene;
		data = data;

		$('body').keydown(function (e) {

			if (e.keyCode === 80) {
				particles.material.visible = !particles.material.visible;
			}

			if (e.keyCode === 76) {
				mapLineMesh.material.visible = !mapLineMesh.material.visible;
			}

			if (e.keyCode === 84) {
				mapTerrainMesh.material.visible = !mapTerrainMesh.material.visible;
			}
		});

		var Colors = function() {
			this.terrain = '#1f0028';
			this.lines = '#e4173e';
			this.particles = '#e4173e';
			this.wireframe = false;
		};

		var color = new Colors();
		var colorController = window.gui.addColor(color, 'terrain');
		var colorController1 = window.gui.addColor(color, 'particles');
		var colorController2 = window.gui.addColor(color, 'lines');
		var wireFrameController = window.gui.add(color, 'wireframe');

		colorController.onChange(function() {
			mapTerrainMesh.material.color = new THREE.Color(color.terrain);
		});

		colorController1.onChange(function() {
			particles.material.color = new THREE.Color(color.particles);
		});

		colorController2.onChange(function() {
			mapLineMesh.material.color = new THREE.Color(color.lines);
		});

		wireFrameController.onChange(function() {
			mapTerrainMesh.material.wireframe = color.wireframe;
		});

	}

	function createMapTerrain() {
		var i = 0,
			geometry,
			material,
			imgW,
			imgH,
			res = 2,
			resW,
			resH,
			size = 8,
			wLength,
			hLength,
			allVertices;

		countryElevationArray = APP.ElevationData.getElevationData('country').elevationArray;

		imgW = APP.ElevationData.getElevationData('country').imgW;
		imgH = APP.ElevationData.getElevationData('country').imgH;
		resW = Math.floor(imgW / res);
		resH = Math.floor(imgH / res);
		wLength = countryElevationArray.length;
		hLength = countryElevationArray[0].length;

		geometry = new THREE.PlaneGeometry(imgW * size, imgH * size, resW, resH);

		allVertices = geometry.vertices.length;

		material = new THREE.MeshPhongMaterial({
			color: 0x1f0028,
			//color: 0xffd3ef,
			shininess: 5,
			side: THREE.DoubleSide,
			shading: THREE.FlatShading,
			opacity: 1,
			transparent: true
		});


		for (i = 0; i < allVertices; i++) {
			var x = geometry.vertices[i].x + imgW * size / 2;
			var y = geometry.vertices[i].y + imgH * size / 2;

			x = x / (imgW * size / wLength);
			y = y / (imgH * size / hLength);

			if (countryElevationArray[x] && countryElevationArray[x][hLength - y]) {
				geometry.vertices[i].z = countryElevationArray[x][hLength - y].scale / 8;
			}
		}

		mapTerrainMesh = new THREE.Mesh(geometry, material);
		mapTerrainMesh.position.z = -30;
		mapTerrainMesh.rotation.z = Math.PI / 2;

		scene.add(mapTerrainMesh);

		geometry.verticesNeedUpdate = true;
		geometry.computeFaceNormals();

		initTerrainParticles();
	}

	function initTerrainParticles() {
		var i,
			cloudmaterial = new THREE.PointCloudMaterial({
				color: 0xe4173e,
				size: 5,
				map: THREE.ImageUtils.loadTexture('i/content/dot_simple_color.png'),
				blending: THREE.AdditiveBlending,
				opacity: 0.3,
				depthwrite: true,
				transparent: true
			});

		var lineMaterial = new THREE.LineBasicMaterial({
			color: 0xe4173e,
			linewidth: 1.5,
			opacity: 0.3,
			blending: THREE.AdditiveBlending,
			transparent: true,
			fog: true
		});

		var geometry = new THREE.Geometry(),
			lineGeom = new THREE.Geometry(),
			step = 8,
			vertex,
			vertex2,
			vertex3,
			item,
			vertices = [];

		for (i = 0; i < countryElevationArray.length; i++) {
			for (var j = 0; j < countryElevationArray[i].length; j++) {

				if (countryElevationArray[i][j].active) {
					vertex = new THREE.Vector3();

					vertex.x = countryElevationArray[i][j].y * step;
					vertex.y = countryElevationArray[i][j].x * step;
					vertex.z = countryElevationArray[i][j].scale / 10;

					if (countryElevationArray[i + 1]) {
						item = countryElevationArray[i + 1][j];

						if (item) {
							vertex2 = new THREE.Vector3();

							vertex2.x = item.y * step;
							vertex2.y = item.x * step;
							vertex2.z = item.scale / 10;

							lineGeom.vertices.push(vertex);
							lineGeom.vertices.push(vertex2);
						}
					}

					item = countryElevationArray[i][j + 1];

					/*if (item) {
						vertex3 = new THREE.Vector3();

						vertex3.x = item.y * step;
						vertex3.y = item.x * step;
						vertex3.z = item.scale / 10;

						lineGeom.vertices.push(vertex);
						lineGeom.vertices.push(vertex3);
					}*/


					geometry.vertices.push(vertex);
					vertices.push(vertex);
				}

			}

		}

		mapLineMesh = new THREE.Line(lineGeom, lineMaterial, THREE.LinePieces);
		scene.add(mapLineMesh);

		particles = new THREE.PointCloud(geometry, cloudmaterial);
		scene.add(particles);
	}

	function updateMaterials() {

		if (mapTerrainMesh && mapTerrainMesh.material) {
			mapTerrainMesh.material.needsUpdate = true;
		}

		if (mapLineMesh && mapLineMesh.material) {
			mapLineMesh.material.needsUpdate = true;
		}

	}

	return {
		init: init,
		createMapTerrain: createMapTerrain,
		updateMaterials: updateMaterials
	};

})();


var Text3d = function (data) {

	var scene,
		highlighted = false,
		sprite;

	function init() {
		scene = data.scene;

		sprite = makeTextSprite(data.name, {fontsize: 42, fontface: 'Helvetica'});
		sprite.position.set(30, 40, 10);
		scene.add(sprite);

	}

	function makeTextSprite(message, parameters) {

		var canvas = document.createElement('canvas'),
			context = canvas.getContext('2d'),
			metrics,
			textWidth,
			texture,
			spriteMaterial,
			sprite;

		if (parameters === undefined) {
			parameters = {};
		}

		var fontface = parameters.hasOwnProperty('fontface') ?
			parameters.fontface : 'Arial';

		var fontsize = parameters.hasOwnProperty('fontsize') ?
			parameters.fontsize : 18;


		context.font = 'Bold ' + fontsize + 'px ' + fontface;

		metrics = context.measureText(message);
		textWidth = metrics.width;

		// text color
		if(parameters.hasOwnProperty('fillStyle')) {
			context.fillStyle = parameters.fillStyle;
		} else {
			context.fillStyle = 'rgba(255, 255, 255, 1.0)';
		}

		context.fillText(message, 0, fontsize );

		// canvas contents will be used for a texture
		texture = new THREE.Texture(canvas);
		texture.needsUpdate = true;

		spriteMaterial = new THREE.SpriteMaterial({
			map: texture,
			useScreenCoordinates: false,
			fog: true
		});
		sprite = new THREE.Sprite(spriteMaterial);
		sprite.scale.set(100, 50, 1.0);

		return sprite;
	}

	function hide() {
		TweenMax.to(sprite.material, 1, {opacity: 0});
	}
	function show() {
		TweenMax.to(sprite.material, 1, {opacity: 1});
	}

	function makeSmaller() {
		TweenMax.to(sprite.scale, 1, {x: 50, y: 25});
		TweenMax.to(sprite.position, 1, {x: 10, y: 25, z: 40});
	}

	function makeNormalSize() {
		TweenMax.to(sprite.scale, 1, {x: 100, y: 50});
		TweenMax.to(sprite.position, 1, {x: 30, y: 40, z: 10});
	}

	function onOver() {

		if(!highlighted && sprite) {
			highlighted = true;
			scene.remove(sprite);

			sprite = makeTextSprite(data.name, {fontsize: 42, fontface: 'Helvetica', fillStyle: '#c53236'});
			sprite.position.set(30, 40, 10);
			scene.add(sprite);
		}

	}

	function onOut() {

		if(highlighted && sprite) {
			highlighted = false;

			scene.remove(sprite);

			sprite = makeTextSprite(data.name, {fontsize: 42, fontface: 'Helvetica'});
			sprite.position.set(30, 40, 10);
			scene.add(sprite);
		}

	}

	return {
		init: init,
		hide: hide,
		show: show,
		onOver: onOver,
		onOut: onOut,
		makeSmaller: makeSmaller,
		makeNormalSize: makeNormalSize,
		getSprite: function () {
			return sprite;
		}
	};

};