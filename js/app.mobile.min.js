/**
 * Global main namespace for the application
 *
 * Entry point of the application
 * @namespace APP
 */

var APP = APP || function () {
	};

/**
 * Main application class
 *
 * @namespace APP
 * @name APP.Main
 */
APP.Main = (/** @lends APP.Main */function (_window) {

	var exports,
		instance,
		cookiePrefix = 'BakuTorch_';

	function init() {

		if (!_window.getCookie('intro-done') && document.location.pathname === '/') {
			_window.setCookie('intro-done', true, 30);
			document.location = '/intro';
		} else {
			if (!window.Promise) {
				ES6Promise.polyfill();
			}

			APP.HandlebarsHelpers.init();

			// get current state before doing anything else
			APP.History.preInit();
			//get/store data from backend!
			APP.Model.init();

			APP.Performance.init();
			APP.Svg.init();
			APP.Layout.init();
			APP.GoogleMaps.init();
			APP.Search.init();

			APP.Model.loadCityList(onCitiesLoaded);

		}

		$(function() {
			FastClick.attach(document.body);
		});

	}

	function onCitiesLoaded() {
		APP.Views.init();
		APP.History.init();

		APP.GoogleMaps.createCityMarkers();

		window.addToHomescreen();
	}

	exports = {
		mobile: true,
		getInstance: function () {

			if (!instance) {
				instance = init();
			}

			return instance;
		},
		getCookiePrefix: function () {
			return cookiePrefix;
		},
		getCookieKey: function (str) {
			return cookiePrefix + str;
		}
	};

	return exports;

}(window));

APP.Layout = (function () {

	var exports,
		$body,
		newsListTimer,
		menuOpenClass = 'application--open-menu';

	function init() {
		$body = APP.Performance.getCachedDOM().$body;
		initBindings();
		// todo find place:

		updateCarousel();

	}

	function updateCarousel() {
		$body.find('[data-owl-carousel]:not([data-inited])').each(function () {
			$(this).attr('data-inited', true).owlCarousel();
		});
	}

	function initBindings() {
		$body.find('[data-menu-indicator]').on('click', toggleMenu);

		$body.on({
			'click': function() {
				$(this).focus();
			}
		}, '[tabindex]');

		$body.on({
			'focus': function () {
				clearTimeout(newsListTimer);
				$body.find('[data-news-item]').attr('data-news-item', 'inactive');
				$(this).attr('data-news-item', 'active');
			},
			'blur': function () {
				clearTimeout(newsListTimer);
				newsListTimer = setTimeout(function () {
					$body.find('[data-news-item]').attr('data-news-item', 'inactive');
				}, 1000);

			}

		}, '[data-news-item]');

		$body.on({
			'click': function () {
				$(this).parents('[data-news-item]').attr('data-news-item', 'active-phase-2');
			}
		}, '[data-action-share]');

		$body.on({
			'click': function () {
				$body.find('[data-city-selector]').attr('data-city-selector', 'active');
			}
		}, '[data-open-city-selector]');

		$body.on({
			'click': function () {
				$body.find('[data-city-selector]').attr('data-city-selector', 'inactive');
			}
		}, '[data-close-city-selector]');

		$body.on({
			'click': function () {
				$body.find($(this).attr('data-toggle-visiblity')).toggleClass('hide--element');
			}
		}, '[data-toggle-visiblity]');

        new Hammer($body[0]).on('swipeleft', function () {
            if ($body.hasClass('application--open-menu')) {
                hideMenu();
            }
        });

        new Hammer($body.find('.page-wrapper')[0]).on('tap', function () {
            if ($body.hasClass('application--open-menu')) {
                hideMenu();
            }
        });

	}

	function toggleMenu() {
		$body.toggleClass(menuOpenClass);
	}

	function hideMenu() {
		$body.removeClass(menuOpenClass);
	}


	exports = {
		init: init,
		updateCarousel: updateCarousel,
		hideMenu: hideMenu
	};

	return exports;

})();

/**
 * Search handling class
 *
 * @namespace APP
 * @name APP.Search
 */
APP.Search = (/** @lends APP.Search */function () {
	var exports,
		$body,
		$search,
		env;

	/**
	 * Initialize Post handling
	 */
	function init() {
		env = document.location.href.indexOf('localhost') !== -1 ? 'local' : 'server';

		initDOMElements();
		initBindings();
	}

	/**
	 * Init DOM elements
	 */
	function initDOMElements() {
		$body = APP.Performance.getCachedDOM().$body;
		$search = $body.find('[data-search] input');
	}

	function initBindings() {

		$body.on({
			'keyup': function (e) {
				var keyword = $(this).val();
				if(keyword === '') {
					$('[data-search]').removeClass('has-user-input');
				} else {
					$('[data-search]').addClass('has-user-input');
				}

				doSearch(keyword);
			}

		}, '[data-search] input');

		$body.on({
			'click': function () {
				$body.find('[data-search-input="query"]').val('');
				$body.find('[data-search-input="city"]').val('0');
				if($('[data-search]').hasClass('has-user-input')) {
					$('[data-search]').removeClass('has-user-input');
				}
				doSearch('');
			}
		}, '[data-search] .icon-close');

        $body.on({
            'click': function () {
                $body.find('[data-search-input="query"]').val('');
                $body.find('[data-search-input="city"]').val('0');
            }

        }, '[data-search-reset]');

        $body.on({
            'click': function () {
                APP.Search.doSearchInCity($body.find('[data-search-input="city"]').val(),
                    $body.find('[data-search-input="query"]').val(),
                    function(result){
                        $body.find('[data-search-result]').html(
                            APP.Views.getTemplate('contributionsListTemplate')(result)
                        );
                    });
            }

        }, '[data-search-submit]');

	}

	function doSearch(keyword, callback) {
		var url = (env === 'local') ? 'js/json/searchnormal.json' : '/api/search/generic?keyword=' + keyword + '&pagesize=10&pagenumber=0';

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				APP.Views.openView('map-search-results', data);
			});

	}

    function doSearchInCity(cityid, keyword, callback) {
        var url = (env === 'local') ? 'js/json/searchwithcity.json' : '/api/search/posts?MaxItemCount=100&Keyword=' + keyword;
        if(!!cityid && env !== 'local') {
            url += '&CityID=' + cityid;
        }

        fetch(url)
            .then(function (response) {
                return response.json();
            })
            .then(function (data) {
                if (callback) {
                    callback.apply(null, [data]);
                }
            });
    }

	exports = {
		init: init,
		doSearch: doSearch,
        doSearchInCity : doSearchInCity
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();


/**
 * SVG handling class
 *
 * @namespace APP
 * @name APP.Svg
 */
APP.Svg = (/** @lends APP.Svg */function () {
	var exports,
		$body,
		settings = {
			svgUrl: 'i/sprite/sprite-app.svg'
		};


	/**
	 * Initialize SVG handling
	 */
	function init() {
		$body = APP.Performance.getCachedDOM().$body;
		loadSvg();
	}

	/**
	 * Loads SVG sprite via ajax
	 * @returns {Object} jQuery promise
	 */
	function loadSvg() {
		var $promise = $.ajax({
			type: 'GET',
			url: settings.svgUrl,
			dataType: 'html',
			contentType: 'application/json; charset=utf-8'
		});

		$.when($promise).then(function (result) {
			addSpriteToDOM(result);
		});

	}

	/**
	 * Add SVG sprite to DOM
	 *
	 * @param sprite
	 */
	function addSpriteToDOM(sprite) {
		$body.find('[data-svgsprite]').remove();
		$body.append('<div class="block--display-none" data-svgsprite>' + sprite + '</div>');
	}

	exports = {
		init: init
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();


/**
 * Mobile Views class
 *
 * @namespace APP
 * @name APP.Views
 */
APP.Views = (function () {

	var exports,
		currentPage,
		$pageHolder,
		$body,
		transitionDirection = 'right',
		templates = {},
		cityTimelineData = {};

	/**
	 * Initialize Views
	 */
	function init() {
		$body = APP.Performance.getCachedDOM().$body;
		$pageHolder = $body.find('[data-page-holder]');
		initHandlebarTemplates();
		initCityDates();
	}

	function openView(view, data) {
		if(data && data.back) {
			transitionDirection = 'left';
		} else {
			transitionDirection = 'right';
		}

		switch (view) {

            case 'home':
            case 'select-city':
				slidePageFrom($(templates.selectCityTemplate(cityTimelineData)), transitionDirection);
				break;

			case 'timeline':
			case 'city-details':
			case 'city-popup':

				//Todo: make some
				if (!data.id) {
					data.id = 'Baku';
				}

				APP.Model.loadCityDetails(initTimelineView, data);

				break;

			case 'news-list':
				APP.Model.loadNewsList(initNewsList, data);
				break;

			case 'liveblog-list':
				APP.Model.getOfficialPostsList(initOfficialPostsList, data);
				break;

			case 'map':
				slidePageFrom($(templates.mapTemplate({})), transitionDirection);
				APP.GoogleMaps.init();
				APP.GoogleMaps.createCityMarkers();
				break;

			case 'contributions':
                var cityId = APP.Model.getCityIdByName(document.location.href.split('/').pop()) || 0;
                APP.Search.doSearchInCity(cityId, '',
                    function(result){
                        result.cityes = APP.Model.getCityList();
                        result.selectedCity = cityId;
                        slidePageFrom($(templates.contributionsTemplate(result)), transitionDirection);
                    });
                break;

            case 'contribute-success':

                APP.Model.getPostById(function(data){
                    data.result.facebookAppId = APP.Social.getFacebookAppId();
                    data.result.domain = document.location.protocol + '//' + document.location.host;
                    data.result.permalink = document.location.protocol + '//' + document.location.host + data.result.url;
                    data.result.imageUrl = data.result.imageUrl + '?size=normal';
                    data.result.currentUploaded = true;
                    slidePageFrom($(templates.contributeViewTemplate(data.result)), transitionDirection);
                }, data.result.postID);
                break;

            case 'search':

                APP.Search.doSearchInCity(0, location.href.split('/').pop(),
                    function(result){
                        result.cityes = APP.Model.getCityList();
                        result.query = data.query;
                        slidePageFrom($(templates.contributionsTemplate(result)), transitionDirection);
                    });
                break;

			case 'contribution':
				slidePageFrom($(templates.contributeTemplate({})), transitionDirection);
                APP.Social.init();
                APP.Social.loadFacebookSDK();
                APP.Contribute.init();
                switchContributionView('social');
				break;

			case 'post':
				APP.Model.getPostById(initPostView, data.page);
				break;

            //for map view!
            case 'map-search-results':

	            var $searchResult = $('[data-search-result]');
	            $searchResult.html($(templates.mapSearchTemplate(data)));

                if ($searchResult.find('li').length > 0) {
	                $searchResult.addClass('show');
                } else {
	                $searchResult.removeClass('show');
				}

                break;


            case 'privacy':
                if($('[data-privacy-service-url]').length){
                    APP.Model.loadContent(initContentView, $('[data-privacy-service-url]').attr('data-privacy-service-url') );
                }
                break;

            case 'terms':
                if($('[data-terms-service-url]').length){
                    APP.Model.loadContent(initContentView, $('[data-terms-service-url]').attr('data-terms-service-url') );
                }

                break;

            }
	}

	function initTimelineView(data) {
        var contributionsNumber = data.result && APP.Model.getCityById(data.result.id).postCount;
		slidePageFrom($(templates.timelineTemplate({
			cities: APP.Model.getCityList(),
			dates: cityTimelineData.dates,
			city: data.result,
            contributionsNumber : contributionsNumber
		})), transitionDirection);

		APP.Layout.updateCarousel();
	}

    function initContentView (data) {
        slidePageFrom($(templates.contentTemplate(data)), transitionDirection);
    }

	function initNewsList(data) {
		slidePageFrom($(templates.newsListTemplate(data)), transitionDirection);
	}

	function initOfficialPostsList(data) {
		slidePageFrom($(templates.liveBlogListTemplate(data)), transitionDirection);
	}

	function initPostView(data) {
		data.result.facebookAppId = APP.Social.getFacebookAppId();
		data.result.domain = document.location.protocol + '//' + document.location.host;
		data.result.permalink = document.location.protocol + '//' + document.location.host + data.result.url;
		data.result.imageUrl = data.result.imageUrl + '?size=normal';

		slidePageFrom($(templates.contributeViewTemplate(data.result)), transitionDirection);
	}

	function slidePageFrom($page, from) {
		$pageHolder.append($page);
		
		// handle intro page > mainpage navigation
		var currentHistoryPage = APP.History.getCurrentPage();
		if (currentHistoryPage.page[0]==='intro') {
			currentPage = $('[data-page-active=true]');
			from = 'right';
		}

		if (!currentPage || !from) {
			$page.attr('class', 'page page--center');
			currentPage = $page;
			APP.Layout.hideMenu();
			return;
		}

		// Position the page at the starting position of the animation
		$page.attr('class', 'page page--' + from);

		currentPage.one('webkitTransitionEnd', function (e) {
			$(e.target).remove();
		});

		// Force reflow. More information here: http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/
		console.log($pageHolder[0].offsetWidth);

		// Position the new page and the current page at the ending position of their animation with a transition class indicating the duration of the animation
		$page.attr('class', 'page page--transition page--center');
		currentPage.attr('class', 'page page--transition page--' + (from === 'left' ? 'right' : 'left'));
		currentPage = $page;

		APP.Layout.hideMenu();

	}

	/*
	 Parse City List for timeline!
	 */

	function initCityDates() {
		var cityList = APP.Model.getCityList(),
			city,
			timelineItem = {},
			date,
			eventTypes = ['past', 'today', 'future'];

		cityTimelineData.dates = [];

		for (var i = 0; i < cityList.length; i++) {
			city = cityList[i];

			if (date && date === city.date) {
				timelineItem.cities.push(city);

			} else {
				date = city.date;

				timelineItem = {
					date: city.date,
					dateType: eventTypes[city.eventDateType],
					dateLabel: city.dateLabel,
					cities: [city]
				};
				cityTimelineData.dates.push(timelineItem);
			}

		}
	}

    function switchContributionView(show,$elem) {
        var views = [ 'images', 'social', 'contribute', 'terms' ],
            hide = [],
            $wrapper = $elem || false;

        if ($wrapper===false) {
            $wrapper = APP.Main.mobile ? $('[data-contribute-module]') : $('[data-overlay]');
        }

        for(var i=0; i<views.length; i++) {
            if (views[i]!==show) { hide.push('show-'+views[i]); }
        }

        $wrapper.removeClass(hide.join(' ')).addClass('show-'+show);

    }

	function initHandlebarTemplates() {
		parseHandleBarTemplate('#map-template', 'mapTemplate');
		parseHandleBarTemplate('#select-city-template', 'selectCityTemplate');
		parseHandleBarTemplate('#timeline-template', 'timelineTemplate');
		parseHandleBarTemplate('#news-list-template', 'newsListTemplate');
		parseHandleBarTemplate('#liveblog-list-template', 'liveBlogListTemplate');
		parseHandleBarTemplate('#contributions-template', 'contributionsTemplate');
        parseHandleBarTemplate('#contributions-list-template', 'contributionsListTemplate');
		parseHandleBarTemplate('#contribute-view-template', 'contributeViewTemplate');
        parseHandleBarTemplate('#contribute-template', 'contributeTemplate');
		parseHandleBarTemplate('#map-search-result-template', 'mapSearchTemplate');
        parseHandleBarTemplate('#content-template', 'contentTemplate');
	}

	function parseHandleBarTemplate(templateDomName, templateVariable) {
		if ($(templateDomName).length) {
			templates[templateVariable] = Handlebars.compile($(templateDomName).html());
		} else {
			console.warn('[Views] error parsing handlebar: ', templateDomName);
		}
	}

	exports = {
		init: init,
		openView: openView,
		switchContributionView: switchContributionView,
		getTemplate : function(tpl) {
			return templates[tpl];
		}
	};

	return exports;

})();

/**
 * Contribute handling class
 *
 * @namespace APP
 * @name APP.Contribute
 */
APP.Contribute = (/** @lends APP.Contribute */function () {
	var exports,
		$body,
		$facebookImageButton,
		$instagramImageButton,
		$overlay,
		facebookFullImageWidth = 720,
		facebookThumbnailWidth = 200,
		imageListTemplate,
		selectedImageUrl = '',
		imageProvider = '',
		processedTags = [],
		imageListCount = APP.Main.mobile ? 9 : 8,
		imageSaveUrl = '/api/torch/image/upload',
		imageDowloadUrl = '/api/torch/image/download',
		postSaveUrl = '/api/torch/post/upload';

	/**
	 * Initialize Contribute handling
	 */
	function init() {
		initDOMElements();
		initBindings();

		imageListTemplate = Handlebars.compile($('#image-list-template').html());
	}

	/**
	 * Init DOM elements
	 */
	function initDOMElements() {
		$body = APP.Performance.getCachedDOM().$body;
		$facebookImageButton = $body.find('[data-facebook-photos]');
		$instagramImageButton = $body.find('[data-instagram-photos]');
		$overlay = $('[data-overlay]');
	}

	function initBindings() {

		$body.on({
			'click': function () {
				APP.Social.getFacebookImages({callback: APP.Contribute.onFacebookImagesLoaded});
			}
		}, '[data-facebook-photos]');

		$body.on({
			'click': function () {
				APP.Social.getInstagramImages({callback: APP.Contribute.onInstagramImagesLoaded});
			}
		}, '[data-instagram-photos]');

		$body.on({
			'click': function () {
				if (imageProvider === 'facebook') {
					APP.Social.getFacebookImages({
						callback: APP.Contribute.onFacebookImagesLoaded,
						direction: 'before',
						value: $(this).attr('data-images-prev-button')
					});
				} else if (imageProvider === 'instagram') {
					console.log('back');
				}
			}
		}, '[data-images-prev-button]');

		$body.on({
			'click': function () {
				if (imageProvider === 'facebook') {
					APP.Social.getFacebookImages({
						callback: APP.Contribute.onFacebookImagesLoaded,
						direction: 'after',
						value: $(this).attr('data-images-next-button')
					});
				} else if (imageProvider === 'instagram') {
					APP.Social.getInstagramImages({
						callback: APP.Contribute.onInstagramImagesLoaded,
						direction: 'max_id',
						value: $(this).attr('data-images-next-button')
					});
				}
			}
		}, '[data-images-next-button]');

		$body.on({
			'click': function () {
				APP.Views.switchContributionView('terms');
				// $overlay.removeClass('show-social show-contribute show-images').addClass('show-terms');
			}
		}, '[data-show-terms]');

		$body.on({
			'click': function () {
				APP.Views.switchContributionView('contribute');
				// $overlay.removeClass('show-social show-contribute show-terms').addClass('show-contribute');
			}
		}, '[data-hide-terms]');

		$body.on({
			'click': function () {
				onImageSelected($(this).attr('data-image-url'));
			}
		}, '[data-image-id]');

		$body.on({
			'click': function (e) {
				e.preventDefault();
				submitForm($(this).closest('form'));
			}
		}, '[data-submit]');

		$body.on({
			'paste': function () {
				limitTextarea($(this));
			},
			'change keyup paste blur': function () {
				limitTextarea($(this));
			},
			'change keydown': function () {
				limitTextarea($(this));
			}
		}, '[data-character-limit]');

		// handle tags field
		$body.on({
			'paste change': function () {
				var $input = $(this);
				setTimeout(function () {
					processTags($input);
				}, 10);
			},
			'blur': function () {
				processTags($(this));
			},
			'keyup': function (e) {
				var k = e.keyCode || e.which;
				// console.log(k);
				if (k === 188 || k === 32) {
					processTags($(this));
				}
			}
		}, '[data-tags]');

		// remove tags
		$body.on({
			'click': function () {
				var tag = $(this).attr('data-tag'),
					maxTags = parseInt($('[data-tags]').attr('data-tags')),
					result = [],
					$dataTags = $('[data-tags]'),
					$dataTagsList = $('[data-tags-list]');

				$(this).remove();

				for (var i = 0; i < processedTags.length; i++) {
					if (processedTags[i] !== tag) {
						result.push(processedTags[i]);
					}
				}
				processedTags = result;

				if (processedTags.length === 0) {
					$dataTagsList.removeClass('has-tags');
				}
				if (processedTags.length === maxTags) {
					$dataTagsList.parent().addClass('has-max');
				} else {
					$dataTagsList.parent().removeClass('has-max');
					$dataTags[0].focus();
				}
				renderTags(false);
			}
		}, '[data-tags-list] [data-tag]');

		$body.on({
			'click': function () {
				$('[data-contribute-block]').removeClass('show-message-timeout');
			}
		}, '[data-close-post-message]');

		$body.on({
			'click': function () {
				var afterNav = $overlay.attr('data-after-confirm'),
					$overlayClose = $overlay.find('[data-nav=overlay-close]');

				if (afterNav !== undefined) {
					switch (afterNav) {
						case 'nav':
							$overlayClose.attr('data-force-close', '');
							APP.History.continueNavigation();
							break;
						case 'close':
							$overlayClose.attr('data-force-close', '').trigger('click');
							break;
					}
				}
			}
		}, '[data-close-post-force]');

		$body.on({
			'click': function () {
				$('[data-contribute-block]').removeClass('show-message-confirm');
				APP.History.resetContinueNavigation();
			}
		}, '[data-close-post-cancel]');

		$body.on({
			'click': function () {
				$(this)[0].select();
			}
		}, '[data-copy-url]');

	}

	function limitTextarea($textarea) {
		var chars = $textarea.val().split('').length,
			limit = parseInt($textarea.attr('data-character-limit'));

		$textarea.siblings('.character-limit').text(limit - chars);

		if (chars > 0) {
			$textarea.closest('.error').removeClass('error');
		}

		// console.log($textarea[0].clientHeight,$textarea[0].scrollHeight);
		if ($textarea[0].clientHeight < $textarea[0].scrollHeight) {
			$textarea.parent().addClass('has-scroll');
		} else {
			$textarea.parent().removeClass('has-scroll');
		}

		if (limit - chars <= 0) {
			$textarea.val($textarea.val().substr(0, limit - 1));
			$textarea.siblings('.character-limit').addClass('trouble');
		} else if (limit - chars < 10) {
			$textarea.siblings('.character-limit').addClass('trouble');
		} else {
			$textarea.siblings('.character-limit').removeClass('trouble');
		}
	}

	function processTags($input) {
		if ($input.val().indexOf(',') === -1 && $input.val().indexOf(' ') === -1) {
			return;
		}

		var tags = $input.val().split(/[\s,]+/);

		for (var i = 0; i < tags.length; i++) {
			// A-z0-9 + hungarian and azeri special characters in unicode
			var cleanTag = $.trim(tags[i].replace(/[^a-zA-Z0-9\u0049\u0069\u00C7\u00D6\u00DC\u00E7\u00F6\u00FC\u011E\u011F\u0130\u0131\u015E\u015F\u018F\u01DD\u00C1\u00C9\u00CD\u00D3\u00D6\u00DA\u00DC\u00E1\u00E9\u00ED\u00F3\u00F6\u00FA\u00FC\u0150\u0151\u0170\u0171]/g, ''));

			if (cleanTag !== '' && processedTags.indexOf(cleanTag) === -1) {
				processedTags.push(cleanTag);
			}
		}

		$input.val('');
		renderTags(true);
	}

	function renderTags(display) {
		var $tagList = $('[data-tags-list]'),
			$targetInput = $('[data-tags-target]'),
			maxTags = parseInt($('[data-tags]').attr('data-tags'));

		$targetInput.val(processedTags.join(','));

		if (display === true && processedTags.length > 0) {
			$tagList.html('').addClass('has-tags');

			for (var i = 0; i < Math.min(processedTags.length, maxTags); i++) {
				if ($tagList.find('[data-tag=' + processedTags[i] + ']').length === 0) {
					$tagList.append('<span class="tag" data-tag="' + processedTags[i] + '">#' + processedTags[i] + '</span>');
				}
			}

			if (processedTags.length === maxTags) {
				$tagList.parent().addClass('has-max');
			} else {
				$tagList.parent().removeClass('has-max');
				$('[data-tags]')[0].focus();
			}
		}
	}

	function onFacebookImagesLoaded(data) {
		var imagesData = {images: []},
			imagesLength;

		// data.data = [];	// to simulate when user doesn't have any photos
		// data.data = data.data.slice(1,3);	// to simulate when user have only a few photos
		bindOverlay('facebook');

		if (data.data.length === 0) {
			onImageSelected(false);
			return;
		}

		for (var i = 0; i < data.data.length; i++) {
			imagesData.images.push({
				fullimage: data.data[i].images[getClosestSizeIndex(data.data[i].images, facebookFullImageWidth)].source,
				thumbnail: data.data[i].images[getClosestSizeIndex(data.data[i].images, facebookThumbnailWidth)].source,
				id: data.data[i].id
			});
		}

		imagesData.after = (typeof data.paging.next !== 'undefined' && imagesData.images.length>=imageListCount) ? data.paging.cursors.after : false;
		imagesData.before = (typeof data.paging.previous !== 'undefined') ? data.paging.cursors.before : false;

		renderImages(imagesData);
	}

	function onInstagramImagesLoaded(data) {
		var imagesData = {images: []},
			image = {};

		// data.data = [];	// to simulate when user doesn't have any photos
		// data.data = data.data.slice(1,3);	// to simulate when user have only a few photos
		bindOverlay('instagram');

		if (data.data.length === 0) {
			onImageSelected(false);
			return;
		}

		for (var i = 0; i < data.data.length; i++) {

			image = {
				/*jshint camelcase: false */
				thumbnail: data.data[i].images.low_resolution.url,
				fullimage: data.data[i].images.standard_resolution.url,
				id: data.data[i].id
			};

			if (data.data[i].location) {
				image.lat = data.data[i].location.latitude;
				image.long = data.data[i].location.longitude;
			}

			imagesData.images.push(image);
		}

		if (data.pagination) {
			imagesData.before = false;
			imagesData.after = (imagesData.images.length>=imageListCount) ? data.pagination.next_max_id : false;
			// imagesData.before = instagramPrev;
			// instagramPrev = data.pagination.next_max_id;
			// console.log('--- instagramPrev updated', instagramPrev);
		}

		renderImages(imagesData);
	}

	function renderImages(imagesData) {

		APP.Views.switchContributionView('images');
		$body.find('[data-image-list]').html(imageListTemplate(imagesData));

        if (imagesData.after !== false) {
            $body.find('[data-images-next-button]').attr('data-images-next-button', imagesData.after).removeClass('block--display-none');
        } else {
            $body.find('[data-images-next-button]').attr('data-images-next-button', '').addClass('block--display-none');
        }
        if (imagesData.before !== false) {
            $body.find('[data-images-prev-button]').attr('data-images-prev-button', imagesData.before).removeClass('block--display-none');
        } else {
            $body.find('[data-images-prev-button]').attr('data-images-prev-button', '').addClass('block--display-none');
        }

	}

	function onImageSelected(imageUrl) {

		var $imageUpload = $('.image-upload');
		selectedImageUrl = imageUrl;

		APP.Views.switchContributionView('contribute');
		$body.find('[data-' + imageProvider + '-photos]').removeClass('block--display-none');
		$imageUpload.addClass('image-selected').removeClass('image-notfound image-uploaderror image-uploaded image-progress');

		if (imageUrl === false) {
			selectedImageUrl = '';
			$imageUpload.addClass('image-notfound').find('span.notfound span.' + imageProvider).removeClass('block--display-none');
		} else {

			var formData = {
				imageurl: selectedImageUrl,
				accountType: imageProvider,
				userId: APP.Social.userData.userId,
				userName: APP.Social.userData.userName,
				accessToken: APP.Social.userData.userToken
			};

			$('.image-upload__image').attr('style', 'background-image: url(\'' + selectedImageUrl + '\')');

			var $promise = $.ajax({
				type: 'POST',
				contentType: 'application/json',
				url: imageDowloadUrl,
				data: JSON.stringify(formData),
				dataType: 'json',
				timeout: 30000
			});

			$.when($promise).then(function (response) {
				// console.log('image download response', response);
				$imageUpload.addClass('image-selected');

				if (response.isSuccess) {
					$imageUpload.addClass('image-uploaded');
					$('.image-upload__image').attr('style', 'background-image: url(\'' + response.result + '\')');
					selectedImageUrl = response.result;
				} else {
					selectedImageUrl = '';
					$('.image-upload__image').removeAttr('style');
					$imageUpload.addClass('image-uploaderror');
					$imageUpload.find('[data-upload-error]').text(response.genericError);
				}
			}, function (x, t) {
				console.log('x:', x, ', t,', t);
				selectedImageUrl = '';

				if (t === 'timeout') {
					$('[data-contribute-block]').removeClass('show-loading').addClass('show-message-timeout');
				}

			});

		}

	}

	/**
	 * bindOverlay
	 * only bind bind fileupload and load citylist when social login is successful
	 */
	function bindOverlay(service) {
		imageProvider = service;
		bindFileupload();

		var $cityList = $('[data-contribute-block] select[name=city]'),
			cityList = APP.Model.getCityList();

		for (var i in cityList) {
			if (cityList[i]) {
				$cityList.append('<option value="' + cityList[i].id + '">' + cityList[i].dateLabel + ' - ' + cityList[i].title + '</option>');
			}

		}

	}

	function bindFileupload() {
		var $imageUpload = $('.image-upload');

		$('#fileupload').fileupload({
			formData: {
				json: JSON.stringify({
					accountType: imageProvider,
					userId: APP.Social.userData.userId,
					userName: APP.Social.userData.userName,
					accessToken: APP.Social.userData.userToken
				})
			},
			url: imageSaveUrl,
			dataType: 'json',
			done: function (e, data) {
				console.log('upload ready', data);
				var response = data._response.result;

				// todo: rearrange, move it to APP.Views.switchContributeView
				if (!$('[data-overlay]').hasClass('show-contribute')) {
					$('[data-overlay]').addClass('show-contribute').removeClass('show-social show-images show-terms');
					$body.find('[data-' + imageProvider + '-photos]').removeClass('block--display-none');
				}

				$imageUpload.removeClass('image-progress').addClass('image-selected');


				if (response.isSuccess) {
					$imageUpload.addClass('image-uploaded');
					$('.image-upload__image').attr('style', 'background-image: url(\'' + response.result + '\')');
					selectedImageUrl = response.result;
				} else {
					selectedImageUrl = '';
					$imageUpload.addClass('image-uploaderror');
					$imageUpload.find('[data-upload-error]').text(response.genericError);
				}

                if(APP.Main.mobile) {
                    $body.find('.upload__wrapper').attr('class', 'upload__wrapper');
                }

			},
			fail: function (e, data) {
                if(APP.Main.mobile) {
                    $body.find('.upload__wrapper').attr('class', 'upload__wrapper upload__wrapper--error');
                }
			},
			start: function (e, data) {
				console.log('progress start', data);
				$('.image-upload__image').removeAttr('style');
				$imageUpload.removeClass('image-uploaderror image-uploaded').addClass('image-progress');

                if(APP.Main.mobile) {
                    $body.find('.upload__wrapper').attr('class', 'upload__wrapper upload__wrapper--progress');
                }

			},
			progressall: function (e, data) {
				var progress = parseInt(data.loaded / data.total * 100, 10);
				$(APP.Main.mobile ? '.progressbar .progress' : '#progress .progress-bar').css('width', progress + '%');
			}
		});
	}

	// reset some variables when closing the overlay or submiting the form successfully
	function resetForm() {
		processedTags = [];
	}

	function submitForm($form) {

		var formData = window.serializeObject($form),
			$imageUpload = $('.image-upload');

		$form.find('.error').removeClass('error');
		$('[data-contribute-block]').addClass('show-loading');

		// process fields & add user data to formData, instead of hidden input fields
		formData.tags = formData.tags.split(',');
		formData.accountType = imageProvider;
		formData.userId = APP.Social.userData.userId;
		formData.userName = APP.Social.userData.userName;
		formData.accessToken = APP.Social.userData.userToken;
		formData.imageUrl = selectedImageUrl;

		console.log('submitForm', formData);

		var $promise = $.ajax({
			type: 'POST',
			contentType: 'application/json',
			url: postSaveUrl,
			data: JSON.stringify(formData),
			dataType: 'json',
			timeout: 30000
		});

		$.when($promise).then(function (result) {
			$('[data-contribute-block]').removeClass('show-loading');

			if (result.isSuccess) {

				console.log('success');
				APP.Views.openView('contribute-success', result);
				resetForm();
				
			} else {

				if (result.errorCodes && result.errorCodes.length !== 0) {
					for (var e in result.errorCodes) {
						if (result.errorCodes[e]) {
							if (e === 'image') {
								$imageUpload.addClass('error');
							} else {
								$form.find('[name=' + e + ']').closest('.field').addClass('error');
							}

						}

					}

				}

			}

		}, function (x, t) {

			console.log('x:', x, ', t,', t);
			if (t === 'timeout') {
				$('[data-contribute-block]').removeClass('show-loading').addClass('show-message-timeout');
			}

		});
	}

	/**
	 * getClosestSizeIndex
	 * get the index of the image which is the closest to a certain size
	 * for facebook images
	 */
	function getClosestSizeIndex(images, targetSize) {
		var selectedIndex = false,
			selectedSize = 0,
			largestAvailableIndex,
			largestAvailableSize = 0;

		for (var i = 0; i < images.length; i++) {
			if (images[i].width > largestAvailableSize) {
				largestAvailableIndex = i;
				largestAvailableSize = images[i].width;
			}
			if (images[i].width >= targetSize && (selectedIndex === false || selectedSize > images[i].width)) {
				selectedIndex = i;
				selectedSize = images[i].width;
			}
		}

		if (selectedIndex === false) {
			selectedIndex = largestAvailableIndex;
			selectedSize = largestAvailableSize;
		}

		return selectedIndex;
	}


	exports = {
		init: init,
		onFacebookImagesLoaded: onFacebookImagesLoaded,
		onInstagramImagesLoaded: onInstagramImagesLoaded,
		resetForm: resetForm
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();

APP.CustomMarker = (/** @lends APP.GoogleMaps */function () {

	var exports = {};

	function init() {

		CustomMarker.prototype = new google.maps.OverlayView();

		CustomMarker.prototype.draw = function () {
			var me = this,
				div = this.div_,
				title;

			if (!div) {
				// Create a overlay text DIV
				div = this.div_ = document.createElement('div');
				// Create the DIV representing our CustomMarker
				div.style.position = 'absolute';
				div.style.paddingLeft = '0px';
				div.style.cursor = 'pointer';

				if (this.type_ < 4) {
					div.style.border = 'none';
				} else {
					if (this.img) {
						var imgDiv = document.createElement('div');
						imgDiv.className = 'post-image';
						imgDiv.style.backgroundImage = 'url(' + this.img + ')';
						//imgDiv.style.backgroundImage = 'url(http://lorempixel.com/200/200/)';
						div.appendChild(imgDiv);
					}
				}

				switch (this.type_) {
					case 0 :
						div.className = 'custom-marker custom-marker-type-0';
						break;
					case 1 :
						div.className = 'custom-marker custom-marker-type-1';
						break;
					case 2 :
						div.className = 'custom-marker custom-marker-type-2';
						break;
					case 3 :
						div.className = 'custom-marker custom-marker-type-3';
						break;

					case 4:
						div.className = 'custom-marker custom-marker-post';
						break;

					default:
						div.className = 'custom-marker';
						break;
				}

				title = document.createElement('span');
				title.textContent = this.title_;

				div.appendChild(title);

				google.maps.event.addDomListener(div, 'click', function (event) {
					google.maps.event.trigger(me, 'click');
				});

				// Then add the overlay to the DOM
				var panes = this.getPanes();
				panes.overlayImage.appendChild(div);

			}

			// Position the overlay
			var point = this.getProjection().fromLatLngToDivPixel(this.latlng_);
			if (point) {
				div.style.left = point.x + 'px';
				div.style.top = point.y + 'px';
			}


		};

		CustomMarker.prototype.remove = function () {
			// Check if the overlay was on the map and needs to be removed.

			if (this.div_) {
				this.div_.parentNode.removeChild(this.div_);
				this.div_ = null;

				this.setMap(null);
			}

		};

		CustomMarker.prototype.getPosition = function () {
			return this.latlng_;
		};

	}

	function CustomMarker(latlng, map, type, title, img) {
		this.latlng_ = latlng;

		// Once the LatLng and text are set, add the overlay to the map.  This will
		// trigger a call to panes_changed which should in turn call draw.
		if(map && this.setMap) {
			this.setMap(map);
		}

		this.type_ = type;
		this.title_ = title;
		this.img = img;
	}

	exports.init = init;
	exports.CustomMarker = CustomMarker;
	return exports;

})();
/**
 * GoogleMaps handling class
 *
 * @namespace APP
 * @name APP.GoogleMaps
 */
APP.GoogleMaps = (/** @lends APP.GoogleMaps */function () {

	var exports,
		$body,
		selectedCity,
		isMapLoaded = false,
		googleMap,
		cityMarkers = [],
		postMarkers = [],
		flightPlanCoordinates,
		routesArray = [];

	/**
	 * Initialize SVG handling
	 */
	function init() {
		initDOMElements();
		loadGoogleMapsSDK();
		initBindings();
	}

	/**
	 * Init DOM elements
	 */
	function initDOMElements() {
		$body = APP.Performance.getCachedDOM().$body;
	}

	function loadGoogleMapsSDK() {
		if (!isMapLoaded) {
			var script = document.createElement('script');
			script.type = 'text/javascript';
			script.src = 'https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyCUfxx2hROthsWDDCmSEp0sTemM-56txM8&callback=APP.GoogleMaps.mapLoaded';
			document.body.appendChild(script);
		} else {
			APP.GoogleMaps.mapLoaded();
		}

	}

	function initBindings() {
		$body.on({
			'click': function () {
				if (googleMap) {
					var zoomType = $(this).attr('data-webgl-control'),
						actZoom = googleMap.zoom;

					if (zoomType === 'zoomin' && actZoom < googleMap.maxZoom) {
						googleMap.setZoom(actZoom + 1);

					} else if (zoomType === 'zoomout' && actZoom > googleMap.minZoom) {
						googleMap.setZoom(actZoom - 1);
					}
				}


			}
		}, '[data-webgl-control]');
	}

	function zoomCity(cityId) {
		var city = APP.Model.getCityById(cityId),
			latlng;

		selectedCity = city;

		if (google && google.maps && google.maps.LatLng && city.lat && city.long) {
			latlng = new google.maps.LatLng(city.lat, city.long);
		}

		if (googleMap && city && latlng) {
			googleMap.setCenter(latlng);
			googleMap.setZoom(12);
		}

		if (postMarkers.length) {
			removePostMarkers();
		}

		APP.Model.getPostByCityId(city.id, onPostsLoaded);
	}

	function onPostsLoaded(data) {

		var postsArray = data.data,
			i,
			marker,
			latlng,
			lat,
			long;

		if (postMarkers.length) {
			removePostMarkers();
		}

		for (i = 0; i < postsArray.length; i++) {
			lat = parseFloat(selectedCity.lat) + (Math.random() - 0.5) * 0.1;
			long = parseFloat(selectedCity.long) + (Math.random() - 0.5) * 0.2;
			latlng = new google.maps.LatLng(lat, long);

			marker = new APP.CustomMarker.CustomMarker(latlng, googleMap, 4, postsArray[i].title, postsArray[i].imageUrl);
			postMarkers.push(marker);

			google.maps.event.addListener(marker, 'click', onPostClicked(postsArray[i]));
		}

	}

	function onPostClicked(post) {
		return function () {
			History.pushState({
				state: 1,
				rand: Math.random()
			}, post.title, post.url.toLowerCase());
		};
	}

	function removePostMarkers() {
		var marker;

		for (var i = 0; i < postMarkers.length; i++) {
			marker = postMarkers[i];

			if (marker) {
				marker.remove();
				marker = null;
			}

		}

		postMarkers = [];

	}

	function mapLoaded() {
		var mapstyle = [
			{
				'featureType': 'all',
				'elementType': 'geometry',
				'stylers': [
					{
						'color': '#157bb6'
					}
				]
			},
			{
				'featureType': 'all',
				'elementType': 'labels.text.fill',
				'stylers': [
					{
						'gamma': 0.01
					},
					{
						'lightness': 20
					}
				]
			},
			{
				'featureType': 'all',
				'elementType': 'labels.text.stroke',
				'stylers': [
					{
						'saturation': -31
					},
					{
						'lightness': -33
					},
					{
						'weight': 2
					},
					{
						'gamma': 0.8
					}
				]
			},
			{
				'featureType': 'all',
				'elementType': 'labels.icon',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'administrative',
				'elementType': 'geometry.fill',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'color': '#ff0000'
					}
				]
			},
			{
				'featureType': 'administrative.country',
				'elementType': 'geometry.fill',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'color': '#17001d'
					}
				]
			},
			{
				'featureType': 'administrative.country',
				'elementType': 'geometry.stroke',
				'stylers': [
					{
						'visibility': 'on'
					},
					{
						'color': '#75192b'
					},
					{
						'weight': '3'
					}
				]
			},
			{
				'featureType': 'administrative.country',
				'elementType': 'labels.text',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'administrative.province',
				'elementType': 'geometry.stroke',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'administrative.province',
				'elementType': 'labels.text',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'administrative.locality',
				'elementType': 'labels.text',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'administrative.neighborhood',
				'elementType': 'labels.text',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'administrative.land_parcel',
				'elementType': 'geometry.fill',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'color': '#460d0d'
					}
				]
			},
			{
				'featureType': 'administrative.land_parcel',
				'elementType': 'geometry.stroke',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'color': '#ff0000'
					}
				]
			},
			{
				'featureType': 'administrative.land_parcel',
				'elementType': 'labels.text',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'landscape',
				'elementType': 'geometry',
				'stylers': [
					{
						'lightness': 30
					},
					{
						'saturation': 30
					}
				]
			},
			{
				'featureType': 'landscape',
				'elementType': 'geometry.fill',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'color': '#ff0000'
					}
				]
			},
			{
				'featureType': 'landscape',
				'elementType': 'labels.text',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'landscape.natural',
				'elementType': 'geometry.fill',
				'stylers': [
					{
						'visibility': 'on'
					},
					{
						'color': '#17001d'
					}
				]
			},
			{
				'featureType': 'landscape.natural.landcover',
				'elementType': 'geometry.fill',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'color': '#f93030'
					}
				]
			},
			{
				'featureType': 'landscape.natural.landcover',
				'elementType': 'geometry.stroke',
				'stylers': [
					{
						'visibility': 'on'
					},
					{
						'color': '#ff0000'
					}
				]
			},
			{
				'featureType': 'landscape.natural.terrain',
				'elementType': 'geometry',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'hue': '#ff0000'
					}
				]
			},
			{
				'featureType': 'landscape.natural.terrain',
				'elementType': 'geometry.fill',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'color': '#000000'
					}
				]
			},
			{
				'featureType': 'landscape.natural.terrain',
				'elementType': 'geometry.stroke',
				'stylers': [
					{
						'visibility': 'off'
					},
					{
						'color': '#dbd5d5'
					}
				]
			},
			{
				'featureType': 'poi',
				'elementType': 'geometry',
				'stylers': [
					{
						'saturation': 20
					},
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'poi.attraction',
				'elementType': 'geometry',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'poi.park',
				'elementType': 'geometry',
				'stylers': [
					{
						'lightness': 20
					},
					{
						'saturation': -20
					}
				]
			},
			{
				'featureType': 'road',
				'elementType': 'geometry',
				'stylers': [
					{
						'lightness': 10
					},
					{
						'saturation': -30
					},
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'road',
				'elementType': 'geometry.stroke',
				'stylers': [
					{
						'saturation': 25
					},
					{
						'lightness': 25
					},
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'road',
				'elementType': 'labels.text',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'transit',
				'elementType': 'geometry',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'water',
				'elementType': 'all',
				'stylers': [
					{
						'lightness': -20
					}
				]
			},
			{
				'featureType': 'water',
				'elementType': 'geometry.fill',
				'stylers': [
					{
						'visibility': 'on'
					},
					{
						'color': '#320c3d'
					}
				]
			},
			{
				'featureType': 'water',
				'elementType': 'labels.text',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			}
		];

		var mapOptions = {
			minZoom: 8,
			maxZoom: 12,
			zoom: 8,
			center: new google.maps.LatLng(40.3847883, 47.6595083),
			styles: mapstyle,
			disableDefaultUI: true
		};

		var strictBounds = new google.maps.LatLngBounds(
			new google.maps.LatLng(38.348453, 44.729536),
			new google.maps.LatLng(41.965934, 50.425948)
		);

		if (document.getElementById('google-maps')) {
			googleMap = new google.maps.Map(document.getElementById('google-maps'), mapOptions);

			google.maps.event.addListener(googleMap, 'zoom_changed', function () {
				removePostMarkers();
			});
			google.maps.event.addListener(googleMap, 'tilesloaded', tilesLoadedCallback);

			google.maps.event.addListener(googleMap, 'dragend', function () {
				if (strictBounds.contains(googleMap.getCenter())) {
					return;
				}

				// We're out of bounds - Move the map back within the bounds

				var c = googleMap.getCenter(),
					x = c.lng(),
					y = c.lat(),
					maxX = strictBounds.getNorthEast().lng(),
					maxY = strictBounds.getNorthEast().lat(),
					minX = strictBounds.getSouthWest().lng(),
					minY = strictBounds.getSouthWest().lat();

				if (x < minX) {
					x = minX;
				}

				if (x > maxX) {
					x = maxX;
				}

				if (y < minY) {
					y = minY;
				}

				if (y > maxY) {
					y = maxY;
				}

				setTimeout(googleMap.panTo(new google.maps.LatLng(y, x)), 1000);
			});

		}

		isMapLoaded = true;
	}

	function tilesLoadedCallback() {
		$('html').addClass('gmaps-loaded');
	}

	function createCityMarkers() {
		var cityListData = APP.Model.getCityList(),
			city,
			cityTo,
			marker,
			latlng,
			i = 0;

		if (!isMapLoaded) {

			setTimeout(function () {
				createCityMarkers();
			}, 200);

			return;
		}

		APP.CustomMarker.init();

		for (i = 0; i < cityListData.length; i++) {
			city = cityListData[i];

			if (city.lat && city.long) {

				latlng = new google.maps.LatLng(city.lat, city.long);

				if (city.eventDateType < 2) {
					flightPlanCoordinates = [];
					cityTo = APP.Model.getCityById(city.connectTo);

					if (cityTo) {
						flightPlanCoordinates.push(latlng);
						flightPlanCoordinates.push(new google.maps.LatLng(cityTo.lat, cityTo.long));
					}

					var flightPath = new google.maps.Polyline({
						path: flightPlanCoordinates,
						geodesic: true,
						strokeColor: '#9d34bb',
						strokeOpacity: 0.8,
						strokeWeight: 2
					});
					flightPath.setMap(googleMap);

					routesArray.push(flightPath);
				}

				marker = new APP.CustomMarker.CustomMarker(latlng, googleMap, city.eventType, city.name);

				google.maps.event.addListener(marker, 'click', onMarkerClicked(city));

				cityMarkers.push(marker);
			}

		}

	}

	function onMarkerClicked(city) {

		return function () {
			var lang = APP.History.getCurrentLang();

			History.pushState({
				state: 1,
				rand: Math.random()
			}, city.title, '/' + lang + '/city/' + city.name.toLowerCase());
		};

	}

	exports = {
		init: init,
		mapLoaded: mapLoaded,
		createCityMarkers: createCityMarkers,
		zoomCity: zoomCity,
		removePostMarkers: removePostMarkers
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();


/**
 * HandlebarsHelpers
 *
 * @namespace APP
 * @name APP.HandlebarsHelpers
 */
APP.HandlebarsHelpers = (/** @lends APP.HandlebarsHelpers */function () {

	var exports;

	function init() {
		initHandlebarsHelpers();
	}

	function initHandlebarsHelpers() {

		Handlebars.registerHelper('toLowerCase', function (str) {
			return str.toLowerCase();
		});

		Handlebars.registerHelper('eq', function (v1, v2, options) {
			if (v1 === v2) {
				return options.fn(this);
			}
			return options.inverse(this);
		});

	}

	exports = {
		init: init
	};

	return exports;

}());

/**
 * History class
 *
 * @namespace APP
 * @name APP.History
 */
APP.History = (/** @lends APP.History */function () {

	var exports,
		navigated = false,
		debug = true,
		currentPage = {},
		manualStateChange = true,
		$continueNavObject = false,
		opts = {
			langs: ['en', 'az'],
			historyOffset: 0
		};

	/**
	 * Initialize History handling
	 */
	function preInit() {
		var state = getPage(History.getState(), true);

	}

	/**
	 * Initialize History handling
	 */
	function init() {
		var state = getPage(History.getState());
		setPage(state);
		initBindings();
	}

	function initBindings() {

		// bind History to statechange
		History.Adapter.bind(window, 'statechange', function () {
			var state = History.getState(),
				back = false;

			if (manualStateChange) {
				back = true;
			}
			manualStateChange = true;

			setPage(getPage(state), back);
		});

		$(document).on('click', '[data-nav]', function (e) {
			e.preventDefault();
			handleUserNavigation(this);
		});

		$(document).on('click', '[data-popup]', function (e) {
			e.preventDefault();
			openPopup(this);
		});

		// close on ESC
		// route to the same event handler to handle confirm
		$(document).on('keyup', function (e) {
			var k = e.keyCode || e.which;
			if (k === 27 && $('[data-overlay]').attr('data-overlay') !== '') {
				$('[data-overlay] [data-nav=overlay-close]').trigger('click');
			}
		});
	}

	function openPopup(elem) {
		var $elem = $(elem),
			size = $elem.attr('data-popup').split('x');

		if ($elem.attr('href') !== undefined) {
			window.open($elem.attr('href'), $elem.text(), 'width=' + size[0] + ',height=' + size[1] + ',left=100,top=100');
		}
	}

	function handleUserNavigation(elem) {

		var navigateBack,
			$elem = $(elem),
			dataNavValue = $elem.attr('data-nav'),
			$overlay = $('[data-overlay]');

		if ($elem.attr('href') !== undefined) {

			// handle confirm for contribution form
			if ($overlay.attr('data-overlay') === 'contribute' && $overlay.hasClass('show-contribute') && $overlay.find('[data-nav=overlay-close]').attr('data-force-close') === undefined && $continueNavObject === false) {
				$('[data-contribute-block]').addClass('show-message-confirm');
				$overlay.attr('data-after-confirm', 'nav');
				$continueNavObject = $elem;
				return;

			} else {
				$overlay.removeAttr('data-after-confirm');
				$overlay.find('[data-nav=overlay-close]').removeAttr('data-force-close');
				History.pushState({state: 1, rand: Math.random()}, getTitle($elem, false), $elem.attr('href'));
				$continueNavObject = false;
				navigated = true;
				manualStateChange = false;

				if ($overlay.attr('data-overlay') === 'contribute') {
					APP.Contribute.resetForm();
				}
			}

		} else {
			// handle custom actions without URL
			navigateBack = false;

			if (dataNavValue === 'overlay-close') {
				// handle confirm for contribution form
				if ($overlay.attr('data-overlay') === 'contribute' && $overlay.hasClass('show-contribute') && $elem.attr('data-force-close') === undefined) {
					$('[data-contribute-block]').addClass('show-message-confirm');
					$overlay.attr('data-after-confirm', 'close');
					return;

				} else {
					$overlay.removeAttr('data-after-confirm');
					$elem.removeAttr('data-force-close');
					$continueNavObject = false;
					APP.Overlay.closeOverlay();

					if ($overlay.attr('data-overlay') === 'contribute') {
						APP.Contribute.resetForm();
					}
				}
			}

			if (dataNavValue === 'overlay-back') {
				// APP.Overlay.closeOverlay();
				navigateBack = true;
			}

			if (navigateBack && navigated) {
				// only go back if the user has already navigated on the site
				History.back();
			} else {
				// navigate to home if there's nowhere to go back
				History.pushState({state: 1, rand: Math.random()}, getTitle($elem, 'Home'), '/');
			}
		}
	}

	/**
	 * Generate page title
	 */
	function getTitle($elem, text) {
		var title = text !== false ? text : $elem.text(),
			prefix = $('[data-logo]').length ? $('[data-logo]').text() + ' - ' : '';

		if ($elem.closest('.overlay-city-popup').length && text === false) {
			title = $elem.find('h2').text();
		}

		if ($elem.attr('data-logo') !== undefined) {
			return $('[data-logo]').text();
		} else {
			return prefix + title;
		}
	}

	/**
	 * Perform navigation
	 */
	function setPage(param, back) {
		var pageSet = false,
			langCookie,
			$langSelect = $('[data-header] [data-lang-sel]');

		// handle instagram response
		if (param.page[0].indexOf('access_token=') !== -1) {
			if (debug) {
				console.log('------------access_token------');
			}
			param.page[2] = param.page[0];
			param.page[1] = 'instagram-login';
			param.page[0] = 'contribute';

			// get language from cookie
			langCookie = window.getCookie('lang');

			if (langCookie !== false) {
				param.lang = langCookie;
			}
		}

		// handle language when changed
		if ($langSelect.attr('data-lang-sel') !== param.lang) {
			$langSelect.attr('data-lang-sel', param.lang);
			$langSelect.find('a.selected').removeClass('selected');
			$langSelect.find('a[data-lang=' + param.lang + ']').addClass('selected');
			window.setCookie('lang', param.lang, 14);
		}

		switch (param.page[0]) {
			case 'home':
				APP.Views.openView('home');
				if (APP.Overlay) {
					APP.Overlay.closeOverlay();
				}
				if (APP.WebGL) {
					APP.WebGL.zoomOut();
				}
				pageSet = true;

				break;

			case 'login':
			case 'contribute':
				if (param.page[1] === 'instagram-login') {
					History.pushState({
						state: 1,
						rand: Math.random()
					}, $(this).text(), '/' + param.lang + '/contribute/');
				}

				APP.Views.openView('contribution', {back: back});
				pageSet = true;

				break;

			case 'contribute-success':
				APP.Views.openView('contribute-success');
				pageSet = true;

				break;

			case 'news':
				APP.Views.openView('news-list', {back: back});
				pageSet = true;

				break;

			case 'liveblog':
				if (param.page[1] !== undefined && window.isNumeric(param.page[1])) {
					APP.Views.openView('contribute', [param.page[1]]);
				} else {
					APP.Views.openView('liveblog-list', {back: back});
				}
				pageSet = true;

				break;

			case 'city':
				if (param.page[1] !== undefined) {
					if (param.page[2] === 'details') {
						APP.Views.openView('city-details', {id: param.page[1], view: 'city-details', navigated: navigated});
					} else {
						APP.Views.openView('city-popup', {id: param.page[1], view: 'city-popup'});
					}
				} else {
					APP.Views.openView('city-details', {view: 'city-details', back: back});
				}

				pageSet = true;

				break;

			case 'event':
				if (param.page[1] !== undefined) {
					APP.Views.openView('event', {id: param.page[1], view: 'event'});
					pageSet = true;
				}

				break;

			case 'post':
				var data = {page: param.page[1],  navigated: navigated};

				if (param.page[1] !== undefined) {
					APP.Views.openView('post', data);
					pageSet = true;
				}

				break;

			case 'search':
				if (param.page[1] !== undefined) {
					if (!APP.Main.mobile) {
						$('[data-search] input').val(param.page[1]);
						APP.Search.doSearch(param.page[1]);
					} else {
						APP.Views.openView('search', {query: param.page[1]});
					}
				}

				break;

			case 'privacy-and-policy':
				APP.Views.openView('privacy');
				break;

			case 'terms-and-conditions':
				APP.Views.openView('terms');
				break;

			//Mobile
			case 'selectcity':
				APP.Views.openView('select-city', {back: back});
				pageSet = true;
				break;

			//city detail on desktop!
			case 'timeline':
				if (param.page[1] !== undefined) {
					APP.Views.openView('timeline', {id: param.page[1], back: back});
				}

				pageSet = true;
				break;

			case 'map':
				APP.Views.openView('map', {back: back});
				pageSet = true;
				break;

			case 'contributions':
				APP.Views.openView('contributions', {back: back});
				pageSet = true;
				break;

		}

		if (pageSet !== false) {
			currentPage = param;
		}

	}

	/**
	 * Process History state into an object with the language and the array of the page path
	 */
	function getPage(state0, store) {
		var state = state0 || History.getState(),
			re = {lang: false, page: []},
			process = [],
			hash = state.hash.split('/'),
			count = 0;

		for (var i in hash) {
			if (hash[i] !== undefined) {
				if (count >= opts.historyOffset) {

					if ($.inArray(hash[i], opts.langs) !== -1) {
						re.lang = hash[i];
					}

					else if (hash[i] !== '' && hash[i].substr(0, 1) !== '?' && $.inArray(hash[i].split('?')[0], opts.langs) === -1) {
						process.push(hash[i].split('?')[0]);
					}

				}

				count++;
			}

		}

		if (re.lang === false) {
			re.lang = opts.langs[0];
		}

		re.page = (process.length === 0) ? ['home'] : process;

		if (!!store) {
			currentPage = re;
		}
		return re;
	}

	exports = {
		init: init,
		preInit: preInit,
		getCurrentLang: function () {
			return currentPage.lang;
		},
		getCurrentPage: function () {
			return currentPage;
		},
		continueNavigation: function () {
			return $continueNavObject.trigger('click');
		},
		resetContinueNavigation: function () {
			$continueNavObject = false;
		},
		getPage: getPage
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();
APP.Model = (function () {

	var env,
		debugDate = true,
		exports,
		currentDate = new Date('2015-07-12'), // format: new Date('2015-05-12'), no timestamp
		cityList = [];

	function init() {
		env =  'local';
	}

	function loadNewsList(callback) {
		var url = (env === 'local') ? 'js/json/news.json' : '/api/torch/news/list';

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				if (callback) {
					callback.apply(null, [data]);
				}
			});

	}

	function loadCityList(callback) {
		var url = (env === 'local') ? 'js/json/cities.json' : '/api/torch/city/list';

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {

				if (!debugDate && data.serverTime) {
					currentDate = new Date(data.serverTime * 1000);
				}

				var cityDate;
				cityList = data.result;

				for (var i = 0; i < cityList.length; i++) {
					cityDate = new Date(cityList[i].date).getTime();

					if (currentDate.getTime() > cityDate) {
						cityList[i].eventDateType = 0;
					} else if (currentDate.getTime() < cityDate) {
						cityList[i].eventDateType = 2;
					} else {
						cityList[i].eventDateType = 1;
					}

					cityList[i].eventDateType = parseInt(cityList[i].eventDateType, 10);
					cityList[i].eventType = parseInt(cityList[i].eventType, 10);
					cityList[i].slug = '/' + APP.History.getCurrentLang() + '/city/' + cityList[i].name.toLowerCase();
					cityList[i].x = parseInt(cityList[i].x, 10);
					cityList[i].y = parseInt(cityList[i].y, 10);
					cityList[i].z = parseInt(cityList[i].z, 10);
					cityList[i].dateNum = parseInt(cityList[i].dateNum, 10);
				}

				callback.apply(null);
			});

	}

	function loadCityDetails(callback, vars) {

		var cityId = getCityIdByName(vars.id),
			url = (env === 'local') ? 'js/json/citydetail' + (cityId === 'e0103024-3af9-4cff-9a92-e4fdaf5f586f' ? '_baku' : '') + '.json' : '/api/torch/citydetail?id=' + cityId;

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				if (callback) {
					callback.apply(null, [data]);
				}

			});
	}

	function loadContent(callback, vars) {
		var url = (env === 'local') ? 'js/json/content.json' : vars;

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				if (callback) {
					callback.apply(null, [data]);
				}

			});

	}

	function loadEventDetails(callback, vars) {
		var url = (env === 'local') ? 'js/json/eventdetail.json' : '/api/torch/eventdetail?id=' + vars.id;

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				if (callback) {
					callback.apply(null, [data]);
				}

			});
	}

	function getCityIdByName(str, field) {
		field = field || 'name';

		for (var i = 0; i < cityList.length; i++) {
			if (cityList[i][field].toLowerCase() === str.toLowerCase()) {
				return cityList[i].id;
			}
		}

		return false;
	}

	function getCityById(id) {
		for (var i = 0; i < cityList.length; i++) {
			if (cityList[i].id.toLowerCase() === id) {
				return cityList[i];
			}
		}

		return false;
	}

	function getAdjacentCity(id,dir) {
		for (var i = 0; i < cityList.length; i++) {
			if (cityList[i].id.toLowerCase() === id) {
				if (dir==='prev') {
					return i-1<0 ? false : cityList[i-1];
				}
				if (dir==='next') {
					return i+1>=cityList.length ? false : cityList[i+1];
				}
				// return dir==='prev' ? cityList[i];
			}
		}

		return false;
	}

	function getPostById(callback, id) {

		var url = (env === 'local') ? 'js/json/post.json' : '/api/torch/getpost/' + id;

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				if (callback) {
					callback.apply(null, [data]);
				}

			});

	}

	function getPostByCityId(id, callback) {
		var url = (env === 'local') ? 'js/json/posts.json' : '/api/search/posts?CityId=' + id + '&MaxItemCount=1000';

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				if (callback) {
					callback.apply(null, [data]);
				}
			});
	}

	function getOfficialPostsList(callback) {
		var url = (env === 'local') ? 'js/json/officialposts.json' : '/api/search/posts?IsOfficial=1&MaxItemCount=100';

		fetch(url)
			.then(function (response) {
				return response.json();
			})
			.then(function (data) {
				if (callback) {
					callback.apply(null, [data]);
				}
			});

	}


	exports = {
		init: init,
		loadCityList: loadCityList,
		loadCityDetails: loadCityDetails,
		loadEventDetails: loadEventDetails,
		loadContent: loadContent,
		getCityList: function () {
			return cityList;
		},
		getCityById: getCityById,
		getCityIdByName: getCityIdByName,
		getAdjacentCity: getAdjacentCity,
		getOfficialPostsList: getOfficialPostsList,

		getPostById: getPostById,
		getPostByCityId: getPostByCityId,
		loadNewsList: loadNewsList,
		getCurrentDate: function () {
			return currentDate;
		}
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})();

/**
 * Performance increase module (cache, device optimizations)
 *
 * @namespace APP
 * @name APP.Performance
 */
APP.Performance = (/** @lends APP.Performance */function () {

	var exports,
		$cachedDOM,
		windowResize,
		deviceProperties;

	/**
	 * Init performance helpers
	 *
	 */
	function init() {
		try {
			initCacheDOM();
			initBindings();
			saveDeviceProperties();
		} catch (e) {
			throw new ReferenceError('APP.Performance cannot be initialized!');
		}
	}

	/**
	 * Cache DOM elements
	 */
	function initCacheDOM() {

		$cachedDOM = {
			window: window,
			$window: $(window),
			$body: $(document.body),
			$html: $('html'),
			$head: $('head')
		};

	}

	function initBindings() {
		$cachedDOM.$window.on('resize', resizeWindow);
	}

	/**
	 * Window resize hook, calls scale carousel method
	 */
	function resizeWindow() {
		clearTimeout(windowResize);

		windowResize = setTimeout(function () {
			saveDeviceProperties();
		}, 200);

	}

	/**
	 * Save device properties to an object
	 */
	function saveDeviceProperties() {
		var w = window,
			d = document,
			e = d.documentElement,
			g = d.getElementsByTagName('body')[0],
			W = w.innerWidth || e.clientWidth || g.clientWidth,
			H = w.innerHeight || e.clientHeight || g.clientHeight;

		deviceProperties = {
			connection: navigator.connection ? navigator.connection : 'unknown',
			pixelRatio: window.devicePixelRatio,
			window: {
				width: W,
				height: H
			}
		};

	}

	/**
	 * Return cached DOM elements
	 *
	 * @returns {*}
	 */
	function getCachedDOM() {
		return $cachedDOM;
	}

	/**
	 * Return saved device properties
	 *
	 * @returns {*}
	 */
	function getDeviceProperties() {
		return deviceProperties;
	}

	exports = {
		init: init,
		initCacheDOM: initCacheDOM,
		getCachedDOM: getCachedDOM,
		getDeviceProperties: getDeviceProperties
	};

	/* test-code */
	exports.__testonly__ = {
		init: init,
		initCacheDOM: initCacheDOM,
		saveDeviceProperties: saveDeviceProperties,
		getCachedDOM: getCachedDOM,
		getDeviceProperties: getDeviceProperties
	};

	/* end-test-code */

	return exports;

}());

/**
 * Social class
 *
 * @namespace APP
 * @name APP.Social
 */
APP.Social = (/** @lends APP.Social */function () {
	var exports,
		$body,
		$contributeButton,
		$facebookLoginButton,
		$instagramLoginButton,
		contributionTemplate,
		facebookID = window._facebookAppId || '701020803351456',
		instagramID = window._instagramAppId || 'a95d4effc65e4c7aa9daa0426ed20856',
		instagramRedirect = window._instagramRedirectUri || 'http://baku2015torch.frodo.dmz/',
		instagramToken,
		instagramUserData = {},
		imageListCount = APP.Main.mobile ? 9 : 8,
		userData = {
			userId: null,
			userName: null,
			userToken: null
		};

	/**
	 * Initialize Social handling
	 */
	function init() {
		initDOMElements();
		initBindings();
		getInstagramSelf();
	}

	/**
	 * Init DOM elements
	 */
	function initDOMElements() {
		$body = APP.Performance.getCachedDOM().$body;
		$contributeButton = $body.find('[data-contribute-button]');
		$facebookLoginButton = $body.find('[data-facebook-login]');
		$instagramLoginButton = $body.find('[data-instagram-login]');
	}

	function initBindings() {

		$body.on({
			'click': function () {
				loginToFacebook();
			}
		}, '[data-facebook-login]');

		$body.on({
			'click': function () {
				if (instagramID && instagramRedirect) {
					window.location = 'https://instagram.com/oauth/authorize/?client_id=' + instagramID + '&redirect_uri=' + instagramRedirect + '&response_type=token';
				}
			}
		}, '[data-instagram-login]');

	}

	function loadFacebookSDK() {

		window.fbAsyncInit = function () {
			FB.init({
				appId: facebookID,
				cookie: true,
				xfbml: true,
				version: 'v2.2'
			});

			FB.getLoginStatus(function (response) {
				console.log('loadFacebookSDK', response);
				// statusChangeCallback(response);
			});
		};

		var js,
			fjs = document.getElementsByTagName('script')[0];

		if (document.getElementById('facebook-jssdk')) {
			return;
		}

		js = document.createElement('script');
		js.id = 'facebook-jssdk';
		js.src = '//connect.facebook.net/en_US/sdk.js';
		fjs.parentNode.insertBefore(js, fjs);
	}

	function loginToFacebook() {
		FB.login(function (response) {
			console.log('facebook response: ', response);

			if (response.status === 'connected') {
				console.log('FB connected', response);
				userData.userId = response.authResponse.userID;
				userData.userToken = response.authResponse.accessToken;
				statusChangeCallback(response);

			} else if (response.status === 'not_authorized') {
				// The person is logged into Facebook, but not your app.
				console.log('not_authorized');
			} else {
				// The person is not logged into Facebook, so we're not sure if
				// they are logged into this app or not.
				console.log('not_lgegedin');
			}
		}, {scope: 'public_profile,email,user_photos'});
	}

	// This is called with the results from from FB.getLoginStatus().
	function statusChangeCallback(response) {
		console.log('FB ', response);

		if (response.status === 'connected') {

			FB.api('/me', function (response) {
				console.log('FB Successful login for: ' + response.name);
				userData.userName = response.name;
				APP.Social.getFacebookImages({callback: APP.Contribute.onFacebookImagesLoaded});
				$body.find('[data-facebook-photos]').removeClass('block--display-none');
			});

		} else if (response.status === 'not_authorized') {
			document.getElementById('status').innerHTML = 'Please log into this app.';
			$facebookLoginButton.removeClass('block--display-none');
		} else {
			document.getElementById('status').innerHTML = 'Please log into Facebook.';
			$facebookLoginButton.removeClass('block--display-none');
		}
	}

	function getFacebookImages(data) {
		var url = '/me/photos/uploaded?limit=' + imageListCount;

		if (data.direction) {
			url += '&' + data.direction + '=' + data.value;
		}

		FB.api(url,
			function (response) {
				if (response && !response.error) {
					if (data.callback) {
						data.callback.apply(null, [response]);
					}
				}
			}
		);
	}

	/**
	 *   Get user informations from instagram!
	 */
	function getInstagramSelf() {
		if (window.location.hash.indexOf('access_token=') !== -1) {
			instagramToken = window.location.hash.split('=')[1];
		}

		var currentPage = APP.History.getCurrentPage();
		if (currentPage.page.length>0 && currentPage.page[0].indexOf('access_token=') !== -1) {
			instagramToken = currentPage.page[0].split('=')[1];
		}

		if (instagramToken) {
			console.log('instagram token accepted', instagramToken);
			$.getJSON('https://api.instagram.com/v1/users/self/?access_token=' + instagramToken + '&callback=?', function (result) {
				console.log('instagram user self result', result.data);
				instagramUserData = result.data;
				userData.userId = result.data.id;
				userData.userName = result.data.username;
				userData.userToken = instagramToken;
				APP.Social.getInstagramImages({callback: APP.Contribute.onInstagramImagesLoaded});
				APP.Views.switchContributionView('images');
			});

		}

	}

	function getInstagramImages(data) {
		var url = 'https://api.instagram.com/v1/users/' + instagramUserData.id + '/media/recent/?access_token=' + instagramToken;

		if (data.direction) {
			/*jshint camelcase: false */
			url += '&' + data.direction + '=' + data.value;
		}

		if (instagramToken) {
			$.getJSON(url + '&count=' + imageListCount + '&callback=?', function (result) {
				if (result && data.callback) {
					if (data.callback) {
						data.callback.apply(null, [result]);
					}
				}
			});
		}

	}

	exports = {
		init: init,
		loadFacebookSDK: loadFacebookSDK,
		getFacebookImages: getFacebookImages,
		getInstagramImages: getInstagramImages,
		getFacebookAppId: function () {
			return facebookID;
		},
		facebookID: facebookID,
		userData: userData
	};

	/* test-code */
	exports.__testonly__ = {};
	/* end-test-code */

	return exports;

})
();

